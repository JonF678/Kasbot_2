{
  "name": "Github_v3 codex fix",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message",
          "callback_query"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -5424,
        1328
      ],
      "id": "e5e94817-be8f-4558-b7a3-8732e40fdabc",
      "name": "Telegram Trigger",
      "webhookId": "9430f32b-9e0e-4247-822f-b381a748d5fc",
      "credentials": {
        "telegramApi": {
          "id": "GWiNIWfCwEPeHIOg",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "/**\n * Unify Telegram message & callback into one shape:\n * { chat_id, text, data, is_callback, username, message_id, _raw }\n */\nconst m = $json.message || {};\nconst c = $json.callback_query || {};\nconst isCb = !!c.data;\n\nconst chat_id = isCb ? c.message.chat.id : (m.chat?.id);\nconst text = (m.text || '').trim();\nconst data = isCb ? c.data : '';\nconst message_id = isCb ? c.message.message_id : (m.message_id || null);\nconst username = (m.from?.username || c.from?.username || '') || '';\n\nreturn [{ json: { chat_id, text, data, is_callback: isCb, message_id, username, _raw: $json } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5200,
        1328
      ],
      "id": "279ea3b7-3c64-40e1-987a-2b559dd2e31c",
      "name": "Normalize Event"
    },
    {
      "parameters": {
        "jsCode": "const now = new Date().toISOString();\nreturn [{\n  json: {\n    CustomerId: $json.chat_id,\n    Username: $json.username || '',\n    LastSeenAt: now,\n    FirstSeenAt: now // will only be used on first insert\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4976,
        1328
      ],
      "id": "811cc332-6870-42b3-9d3f-6e37e134b3ba",
      "name": "Build Customer Upsert"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 415140327,
          "mode": "list",
          "cachedResultName": "Customers",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=415140327"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "CustomerId",
              "lookupValue": "={{ $json.chat_id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -4752,
        1328
      ],
      "id": "b3d3d3fc-c5f6-4062-a151-698d3d5adefb",
      "name": "GS: Read Customer",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const rows = $items('GS: Read Customer').map(i=>i.json);\nconst id = $items('Normalize Event')[0].json.chat_id;\nconst idx = rows.findIndex(r => String(r.CustomerId) === String(id));\nconst existing = idx >= 0 ? rows[idx] : null;\nreturn [{ json: { exists: !!existing, rowIndex: idx+2 /* +2 for header+1-based */, existing } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4528,
        1328
      ],
      "id": "3c6878f7-78e4-4f91-b4f3-2c81a81ca592",
      "name": "Find Customer Row"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "701f1773-ee81-4561-97bb-199934d7a86c",
              "leftValue": "={{ $json.exists }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -4304,
        1328
      ],
      "id": "d9a1ef76-07af-4caa-b220-4a12e599eea8",
      "name": "IF Customer Exists?"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 415140327,
          "mode": "list",
          "cachedResultName": "Customers",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=415140327"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "CustomerId": "={{$items('Normalize Event')[0].json.chat_id}}",
            "Username": "={{$items('Normalize Event')[0].json.username}}",
            "LastSeenAt": "={{$now}}"
          },
          "matchingColumns": [
            "CustomerId"
          ],
          "schema": [
            {
              "id": "CustomerId",
              "displayName": "CustomerId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Username",
              "displayName": "Username",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "FirstSeenAt",
              "displayName": "FirstSeenAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastSeenAt",
              "displayName": "LastSeenAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderNumber",
              "displayName": "LastOrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "OrdersCount",
              "displayName": "OrdersCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "OptInMarketing",
              "displayName": "OptInMarketing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ConsentTimestamp",
              "displayName": "ConsentTimestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ConsentSource",
              "displayName": "ConsentSource",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -4080,
        1232
      ],
      "id": "9414ef75-ff8a-4cab-8c66-3b05fef2d072",
      "name": "Update Customer",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 415140327,
          "mode": "list",
          "cachedResultName": "Customers",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=415140327"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "CustomerId": "={{$items('Normalize Event')[0].json.chat_id}}",
            "Username": "={{$items('Normalize Event')[0].json.username}}",
            "FirstSeenAt": "={{$now}}",
            "LastSeenAt": "={{$now}}",
            "OrdersCount": "0",
            "OptInMarketing": "FALSE"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "CustomerId",
              "displayName": "CustomerId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Username",
              "displayName": "Username",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "FirstSeenAt",
              "displayName": "FirstSeenAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastSeenAt",
              "displayName": "LastSeenAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderNumber",
              "displayName": "LastOrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "OrdersCount",
              "displayName": "OrdersCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "OptInMarketing",
              "displayName": "OptInMarketing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ConsentTimestamp",
              "displayName": "ConsentTimestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ConsentSource",
              "displayName": "ConsentSource",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -4080,
        1424
      ],
      "id": "a896df31-d189-49f4-a612-920dcbdaa995",
      "name": "Append Customer",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -4976,
        1040
      ],
      "id": "ac846a52-9f20-48f1-b53b-d2d54fad3c11",
      "name": "GS: Read State",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const rows = $items('GS: Read State').map(i=>i.json);\nconst chat_id = $items('Normalize Event')[0].json.chat_id;\nconst idx = rows.findIndex(r => String(r.chat_id) === String(chat_id));\nconst exists = idx >= 0;\nconst rowIndex = idx+2; // header + 1-based\nreturn [{ json: { chat_id, exists, rowIndex } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4528,
        1040
      ],
      "id": "1de1408a-c64c-49b4-83ea-a6480842398b",
      "name": "Find/Init State"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "701f1773-ee81-4561-97bb-199934d7a86c",
              "leftValue": "={{ $json.exists }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -4304,
        1040
      ],
      "id": "554d71a2-4ed4-4379-affe-372b9a149da9",
      "name": "IF State Exists?"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "chat_id": "={{$items('Normalize Event')[0].json.chat_id}}",
            "UpdatedAt": "={{$now}}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Fulfillment",
              "displayName": "Fulfillment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Zone",
              "displayName": "Zone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "DeliveryFee",
              "displayName": "DeliveryFee",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderNumber",
              "displayName": "LastOrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderUID",
              "displayName": "LastOrderUID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "UpdatedAt",
              "displayName": "UpdatedAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CartFrozen",
              "displayName": "CartFrozen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PaymentStatus",
              "displayName": "PaymentStatus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -3856,
        1040
      ],
      "id": "65159ed1-465b-43be-bf0a-8a830005b33c",
      "name": "Append State",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse Callback — robust\n// - Supports \"ADD|SKU\" and \"KIND|ACTION|SKU\"\n// - Harvests callback query id (cqid) from multiple shapes including _raw\n\nconst u    = $json;\nconst raw  = u._raw ?? u;  // your Normalize Event keeps the original payload here\nconst cb   = raw.callback_query || raw.callbackQuery || raw.callback || null;\nconst msg  = cb?.message ?? raw.message ?? u.message ?? u;\n\n// Sender / chat\nconst from = cb?.from ?? msg?.from ?? {};\nconst chat = msg?.chat ?? {};\n\n// Base fields\nconst chat_id   = String(chat.id ?? u.chat_id ?? from.id ?? '');\nconst username  = (from.username ?? u.username ?? '') || '';\nconst text      = (u.text ?? msg?.text ?? '').trim();\n\n// Callback payload + ID\nconst data = (u.data ?? cb?.data ?? raw.callback_data ?? '').trim();\n\n// Callback query id (various shapes)\nconst cqid =\n  u.cqid ??\n  u.query_id ??\n  u.callback_query_id ??\n  raw?.query_id ??\n  raw?.callback_query_id ??\n  cb?.id ??\n  null;\n\nconst message_id = Number(msg?.message_id ?? u.message_id ?? 0) || 0;\n\n// Parse action/sku\nlet kind   = '';\nlet action = '';\nlet sku    = '';\n\n// ✅ NEW: mark plain text messages explicitly as 'text'\nif (!data && text) {\n  kind = 'text';\n}\n\nif (data) {\n  const parts = data.split('|');\n  if (parts.length >= 3) {\n    [kind, action, sku] = parts;        // KIND|ACTION|SKU\n  } else if (parts.length === 2) {\n    [action, sku] = parts;               // ACTION|SKU\n    kind = 'BTN';\n  } else {\n    kind = 'BTN';\n    action = parts[0] || '';\n  }\n}\n\n// Optional passthroughs\nconst page = u.page ?? null;\nconst arg  = u.arg  ?? null;\n\n// Mark as callback if we have an id OR callback data\nconst is_callback = Boolean(cqid || data);\n\nreturn [{\n  json: {\n    chat_id, username, text, data,\n    kind, action, sku, page, arg,\n    message_id, cqid, is_callback\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4976,
        1520
      ],
      "id": "422f71ce-d805-4f27-8a48-86d7bfe8c5b0",
      "name": "Parse Callback"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.text}}",
                    "rightValue": "/menu",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    },
                    "id": "c0520939-e2c4-49f7-a982-659c58d5d237"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "menu_page"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "cf4e7f80-3c66-435a-992e-77c5ca75120c",
                    "leftValue": "={{$json.data}}",
                    "rightValue": "MENU|REFRESH",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "menu_refresh"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "cd1d5dc8-eb16-4b33-8bf8-66d786afc36b",
                    "leftValue": "={{$json.kind}}",
                    "rightValue": "text",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ed074831-baf8-4b8c-ad34-fc7d71ed2b32",
                    "leftValue": "={{$json.data}}",
                    "rightValue": "ADD|",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "add"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3576c5d6-25bd-4750-a388-1be24d6a9a2e",
                    "leftValue": "={{$json.data}}",
                    "rightValue": "CART|VIEW",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "view"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "572e44a3-ee45-4e99-9031-6f45dbec0a5c",
                    "leftValue": "={{$json.data}}",
                    "rightValue": "CART|CLEAR",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "clear"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "b3b45c2a-e899-493c-8680-4ec30f4c4996",
                    "leftValue": "={{$json.data}}",
                    "rightValue": "CART|CHECKOUT",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "cart_checkout"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "dbcb4cec-8143-4f67-9827-ef0ea7182c6e",
                    "leftValue": "={{$json.data}}",
                    "rightValue": "DETAILS|",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "details"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "054353b8-618e-4aa0-a936-49a70372c4d5",
                    "leftValue": "={{$json.data}}",
                    "rightValue": "FULFILL|DELIVERY",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "fulfill_delivery"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "017ff0d1-be80-4eca-8714-9c7d5c9e4068",
                    "leftValue": "={{$json.data}}",
                    "rightValue": "FULFILL|PICKUP",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "fulfill_pickup"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "4604fb0e-fc8d-4e71-a431-a4240e2b0fb7",
                    "leftValue": "={{$json.data}}",
                    "rightValue": "ADDR|CHANGE",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "addr_change"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "108389d6-b750-46f0-a63b-174b37b70a0e",
                    "leftValue": "={{ $json.action || ($json.data || '').split('|')[0] }}",
                    "rightValue": "CHECKOUT",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "checkout"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6cdc6605-7d57-42c7-88b9-f0c8407e8519",
                    "leftValue": "={{ $json.action || ($json.data || '').split('|')[0] }}",
                    "rightValue": "PAY",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "pay_instr"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1d2f7344-ace6-41ee-a8c6-cb2d084b6264",
                    "leftValue": "={{$json.data}}",
                    "rightValue": "MENU|OPEN",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "menu_open"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "30b77c40-825e-4e70-a8eb-5eafc83c59e4",
                    "leftValue": "={{$json.data}}",
                    "rightValue": "RESET|START",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "reset_start"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "88edfc07-5b3c-4724-b4cc-8bd46eaf9b18",
                    "leftValue": "={{$json.data}}",
                    "rightValue": "HELP|AGENT",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "help_agent"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "5d3e83c7-f8b3-4a1d-8d49-fd81e5785652",
                    "leftValue": "={{$json.data}}",
                    "rightValue": "MENU|CATS",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "carts_page"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "562097e9-c549-4ae5-a549-301e6eb645fd",
                    "leftValue": "={{$json.data}}",
                    "rightValue": "CAT|OPEN|",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "cat_open"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "51f42b70-5b02-4d31-938c-0f523bf6ef44",
                    "leftValue": "={{$json.data}}",
                    "rightValue": "CAT|PAGE|",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "cat_page"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -2128,
        1696
      ],
      "id": "b1db50c0-7d88-4ea7-ae90-50db8b8d306e",
      "name": "Action Router"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Menu",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=0"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1232,
        944
      ],
      "id": "fd7bd086-d4cf-41e0-8bc0-6b8713d15514",
      "name": "GS: Read Menu",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "/**\n * Build Menu Reply — Category-first UX\n * - Default view: list categories (with item counts)\n * - Category view: list items in the chosen category + pagination\n * - Respects your existing Parse Callback shape and button styles\n */\n\nconst PAGE_SIZE = 6;\nconst CURRENCY = '₵';\nconst HEADER_CATS = '🍽️ *Browse by Category*';\nconst HEADER_ITEMS = '🍽️ *Today’s Menu*';\nconst MAX_LABEL_CHARS = 40;\nconst md = s => String(s ?? '').replace(/([_*\\[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\n\nconst clean = v => (v ?? '').toString().trim();\nconst isTrue = v => {\n  const s = clean(v).toLowerCase();\n  return s === 'true' || s === '1' || v === true || v === 1;\n};\nconst priceFmt = v => {\n  const n = parseFloat(v);\n  return Number.isFinite(n) ? `${{CURRENCY}}${{n.toFixed(2)}}` : `${{v}}`;\n};\nconst trimLabel = (s, n = MAX_LABEL_CHARS) => {\n  const t = clean(s);\n  return t.length > n ? t.slice(0, n - 1) + '…' : t;\n};\n\nconst enc = s => clean(s).replace(/\\|/g, '/');\nconst dec = s => clean(s);\n\nfunction fromNode(name) {\n  try {\n    const a = $items(name);\n    if (Array.isArray(a) && a.length) return a[0].json;\n  } catch (_) {}\n  return undefined;\n}\n\nconst ctx = fromNode('Parse Callback') || fromNode('Default Menu Page') || $json;\n\nconst chat_id =\n  ctx?.chat_id ??\n  ctx?.message?.chat?.id ??\n  ctx?.callback_query?.message?.chat?.id;\n\nif (!chat_id) throw new Error('Build Menu Reply: no chat_id found.');\n\nconst rows = $input.all().map(i => i.json);\n\nconst available = rows.filter(r => {\n  if ('Active' in r) return isTrue(r.Active);\n  if ('Available' in r) return isTrue(r.Available);\n  return true;\n});\n\nconst seen = new Set();\nconst unique = [];\nfor (const r of available) {\n  const key = clean(r.SKU) || `${{clean(r.Dish)}}|${{clean(r.Price)}}`;\n  if (!seen.has(key)) { seen.add(key); unique.push(r); }\n}\n\nconst groups = {};\nfor (const r of unique) {\n  const cat = clean(r.Category) || 'Menu';\n  (groups[cat] ||= []).push(r);\n}\nObject.values(groups).forEach(list =>\n  list.sort((a, b) => clean(a.Dish).localeCompare(clean(b.Dish)))\n);\nconst catNames = Object.keys(groups).sort((a, b) => a.localeCompare(b));\nconst counts = Object.fromEntries(catNames.map(c => [c, groups[c].length]));\n\nconst kind   = clean(ctx.kind);\nconst action = clean(ctx.action);\nconst data   = clean(ctx.data);\nlet token    = clean(ctx.sku);\nlet page     = 1;\nlet catSel   = '';\n\nif (data === 'MENU|CATS') {\n} else if (kind === 'CAT' && action === 'OPEN') {\n  catSel = dec(token);\n  page = 1;\n} else if (kind === 'CAT' && action === 'PAGE') {\n  const [rawCat, p] = token.split('::');\n  catSel = dec(rawCat);\n  page = Math.max(1, Number(p || 1));\n}\n\nif (!catSel) {\n  if (!catNames.length) {\n    return [{\n      json: {\n        chat_id,\n        text: `${{HEADER_CATS}}\n\n_No dishes available right now. Please check back later._`,\n        parse_mode: 'Markdown',\n        reply_markup: {\n          inline_keyboard: [\n            [{ text: '🔄 Refresh', callback_data: 'MENU|REFRESH' }],\n            [\n              { text: '🧺 View Cart',  callback_data: 'CART|VIEW' },\n              { text: '✅ Checkout',   callback_data: 'CART|CHECKOUT' },\n              { text: '🧹 Clear',      callback_data: 'CART|CLEAR' }\n            ]\n          ]\n        }\n      }\n    }];\n  }\n\n  let text = `${{HEADER_CATS}}\n\n_Select a category:_\n`;\n  for (const c of catNames) {\n    text += `• ${{md(c)}} (${{counts[c]}})\n`;\n  }\n\n  const kb = [];\n  for (const c of catNames) {\n    kb.push([{ text: `${{c}} (${{counts[c]}})`, callback_data: `CAT|OPEN|${{enc(c)}}` }]);\n  }\n  kb.push([\n    { text: '🧺 View Cart',  callback_data: 'CART|VIEW' },\n    { text: '✅ Checkout',   callback_data: 'CART|CHECKOUT' },\n    { text: '🧹 Clear',      callback_data: 'CART|CLEAR' }\n  ]);\n\n  return [{ json: { chat_id, text, parse_mode: 'Markdown', reply_markup: { inline_keyboard: kb } } }];\n}\n\nconst inCat = (groups[catSel] || []).map(r => {\n  const emoji = clean(r.Emoji);\n  const dishName = clean(r.Dish) || clean(r.ButtonLabel) || clean(r.SKU);\n  const baseRaw = [emoji, dishName].filter(Boolean).join(' ').trim();\n  return {\n    sku: clean(r.SKU) || `${{clean(r.Dish)}}|${{clean(r.Price)}}`,\n    itemBtn: `${{trimLabel(baseRaw)}} — ${{priceFmt(r.Price)}}`,\n    bodyLine: `• ${{md(baseRaw)}} — ${{priceFmt(r.Price)}}`\n  };\n});\n\nif (!inCat.length) {\n  return [{\n    json: {\n      chat_id,\n      text: `*${{HEADER_ITEMS}}*\n\n_No dishes in \"${{md(catSel)}}\" right now._`,\n      parse_mode: 'Markdown',\n      reply_markup: {\n        inline_keyboard: [\n          [{ text: '🔙 Categories', callback_data: 'MENU|CATS' }],\n          [\n            { text: '🧺 View Cart',  callback_data: 'CART|VIEW' },\n            { text: '✅ Checkout',   callback_data: 'CART|CHECKOUT' },\n            { text: '🧹 Clear',      callback_data: 'CART|CLEAR' }\n          ]\n        ]\n      }\n    }\n  }];\n}\n\nconst totalItems = inCat.length;\nconst totalPages = Math.max(1, Math.ceil(totalItems / PAGE_SIZE));\npage = Math.min(Math.max(1, page), totalPages);\nconst start = (page - 1) * PAGE_SIZE;\nconst pageItems = inCat.slice(start, start + PAGE_SIZE);\n\nlet text = `${{HEADER_ITEMS}}\n\n*${{md(catSel)}}*\n`;\nfor (const it of pageItems) text += it.bodyLine + '\n';\ntext += `\n_Page ${{page}} of ${{totalPages}}_\n_Tap an item to add to cart_`;\n\nconst kb = [];\nfor (const it of pageItems) {\n  kb.push([{ text: it.itemBtn, callback_data: `ADD|${{it.sku}}` }]);\n  kb.push([{ text: 'ℹ️',       callback_data: `DETAILS|${{it.sku}}` }]);\n}\n\nconst nav = [];\nif (page > 1)        nav.push({ text: '⬅️ Prev', callback_data: `CAT|PAGE|${{enc(catSel)}}::${{page - 1}}` });\nnav.push({ text: '🔙 Categories', callback_data: 'MENU|CATS' });\nif (page < totalPages) nav.push({ text: 'Next ➡️', callback_data: `CAT|PAGE|${{enc(catSel)}}::${{page + 1}}` });\nkb.push(nav);\n\nkb.push([\n  { text: '🧺 View Cart',  callback_data: 'CART|VIEW' },\n  { text: '✅ Checkout',   callback_data: 'CART|CHECKOUT' },\n  { text: '🧹 Clear',      callback_data: 'CART|CLEAR' }\n]);\n\nreturn [{ json: { chat_id, text, parse_mode: 'Markdown', reply_markup: { inline_keyboard: kb } } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1040,
        976
      ],
      "id": "805c5f9c-e6f7-42ef-b9dc-252bc53a4eba",
      "name": "Build Menu Reply"
    },
    {
      "parameters": {
        "jsCode": "return [{ json: { chat_id: $json.chat_id, page: 1 }}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1456,
        896
      ],
      "id": "f0946d30-9890-4341-86e1-c60d2f020945",
      "name": "Default Menu Page"
    },
    {
      "parameters": {
        "jsCode": "// Build Dish Details — sendPhoto (preferred) or sendMessage (fallback)\nconst CURRENCY = '₵';\nconst md = s => String(s ?? '').replace(/([_*\\[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\n\nconst parse = $items('Parse Callback')[0]?.json || $json;\nconst sku = parse.sku || $json.sku;\nconst chat_id = parse.chat_id || $json.chat_id;\n\nconst rows = $input.all().map(i => i.json);\nconst row = rows.find(r => String(r.SKU) === String(sku));\n\nif (!row) {\n  return [{\n    json: {\n      _endpoint: 'sendMessage',\n      payload: { chat_id, text: 'Item not found.' }\n    }\n  }];\n}\n\nconst price = Number(row.Price) || 0;\nconst emoji = md(row.Emoji || '').trim();\nconst dishName = md(row.Dish || row.ButtonLabel || row.SKU || '');\nconst namePart = [emoji, dishName].filter(Boolean).join(' ').trim();\nconst notes = row.Notes ? `\n_${{md(row.Notes)}}_` : '';\nconst caption = `*${{namePart}} — ${{CURRENCY}}${{price}}*${{notes}}`;\n\nconst kb = {\n  inline_keyboard: [\n    [{ text: `➕ Add ${row.Dish || row.SKU || ''}`, callback_data: `ADD|${sku}` }],\n    [{ text: '⬅️ Back', callback_data: 'MENU|REFRESH' }]\n  ]\n};\n\nif (row.PhotoURL) {\n  return [{\n    json: {\n      _endpoint: 'sendPhoto',\n      payload: {\n        chat_id,\n        photo: row.PhotoURL,\n        caption,\n        parse_mode: 'Markdown',\n        reply_markup: kb\n      }\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    _endpoint: 'sendMessage',\n    payload: {\n      chat_id,\n      text: caption,\n      parse_mode: 'Markdown',\n      reply_markup: kb\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1232,
        2176
      ],
      "id": "561b4fb1-c9a2-402b-940a-f0b91b41cd84",
      "name": "Build Dish Details"
    },
    {
      "parameters": {
        "jsCode": "// Pick Menu Item (by SKU)\n// Mode: Run once for all items\n\n// All menu rows from GS: Read Menu\nconst menu = $input.all().map(i => i.json);\n\n// SKU the user actually tapped\nconst cb = ($items('Parse Callback')?.[0]?.json) || {};\nconst chat_id = String(cb.chat_id || '');\nconst wanted = String(cb.sku || '').trim().toUpperCase();\nif (!chat_id || !wanted) return []; // nothing to do\n\n// Find the matching row in the menu\nconst row = menu.find(r =>\n  String(r.SKU || '').trim().toUpperCase() === wanted\n);\nif (!row) return []; // SKU not in menu\n\nconst price = Number(row.Price || 0);\nconst dish  = row.Dish ?? row.ButtonLabel ?? wanted;\n\n// Emit exactly one new cart line\nreturn [{\n  json: {\n    chat_id,\n    LineId: `${chat_id}|${wanted}`,\n    SKU: wanted,\n    Dish: dish,\n    Price: price,\n    Quantity: 1,\n    LineTotal: price,\n    Frozen: '',\n    CurrentStep: '',\n    PaymentStatus: '',\n    OrderNumber: '',\n    OrderUID: ''\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1200,
        1600
      ],
      "id": "fc67a3c5-b4b7-4c0b-9f9e-4bbf30247b0b",
      "name": "Pick Menu Item (by SKU)"
    },
    {
      "parameters": {
        "jsCode": "// Input: the single “picked menu item by SKU” (current add) is $json\n// Read all cart rows from the previous GS: Read Cart (add)\nconst rows = $items('GS: Read Cart (add)').map(i => i.json);\n\nconst chatId = String($json.chat_id);\nconst sku    = String($json.SKU);\n\n// “Open” = NOT frozen, NOT paid, NO order number\nconst isOpen = r =>\n  String(r.chat_id) === chatId &&\n  String(r.SKU)     === sku &&\n  !String(r.Frozen ?? '').toLowerCase().startsWith('t') &&\n  !String(r.PaymentStatus ?? '').toUpperCase().includes('PAID') &&\n  !String(r.OrderNumber ?? '').trim();\n\nconst open = rows.filter(isOpen);\n\n// If we have an existing open row, keep its row_number to update.\n// (If you want newest, sort by Timestamp and take last)\nif (open.length) {\n  const keep = open[open.length - 1];\n  return [{\n    json: {\n      ...keep,\n      exists: true,\n      keep_row_number: keep.row_number   // <-- we’ll match updates on this\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    exists: false,\n    chat_id: chatId,\n    SKU: sku,\n    // Carry through what your downstream nodes need\n    Dish: $json.Dish,\n    Price: $json.Price,\n    Quantity: 1,\n    LineTotal: Number($json.Price || 0)\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -848,
        1376
      ],
      "id": "4c212ed5-d76f-4482-8a11-e6e60558e2ef",
      "name": "Find Existing Cart Line"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "701f1773-ee81-4561-97bb-199934d7a86c",
              "leftValue": "={{$json.exists === true && $json.keep_row_number && $json.keep_row_number > 0}}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -368,
        1472
      ],
      "id": "694fed12-6940-4881-85df-a06c92e7a744",
      "name": "IF Exists?"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Timestamp": "={{$now}}",
            "Quantity": "={{$json.Quantity}}",
            "LineTotal": "={{$json.LineTotal}}",
            "row_number": "={{$json.keep_row_number}}"
          },
          "matchingColumns": [
            "row_number"
          ],
          "schema": [
            {
              "id": "Timestamp",
              "displayName": "Timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "LineId",
              "displayName": "LineId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "SKU",
              "displayName": "SKU",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Dish",
              "displayName": "Dish",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Price",
              "displayName": "Price",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Quantity",
              "displayName": "Quantity",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LineTotal",
              "displayName": "LineTotal",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "OrderNumber",
              "displayName": "OrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Frozen",
              "displayName": "Frozen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PaymentStatus",
              "displayName": "PaymentStatus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Deleted",
              "displayName": "Deleted",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "OrderUID",
              "displayName": "OrderUID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        352,
        1104
      ],
      "id": "640d9ed5-02cd-408b-ad52-ca14a9a8c6a1",
      "name": "GS: Update Cart Line",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Timestamp": "={{$now}}",
            "chat_id": "={{$json.chat_id}}",
            "LineId": "={{$json.chat_id}}|{{$json.SKU}}",
            "SKU": "={{$json.SKU}}",
            "Dish": "={{$json.Dish}}",
            "Price": "={{$json.Price}}",
            "Quantity": "={{Number($json.Quantity) || 1}}",
            "LineTotal": "={{ (Number($json.Quantity) || 1) * (Number($json.Price) || 0) }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Timestamp",
              "displayName": "Timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LineId",
              "displayName": "LineId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "SKU",
              "displayName": "SKU",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Dish",
              "displayName": "Dish",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Price",
              "displayName": "Price",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Quantity",
              "displayName": "Quantity",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LineTotal",
              "displayName": "LineTotal",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "OrderNumber",
              "displayName": "OrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Frozen",
              "displayName": "Frozen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PaymentStatus",
              "displayName": "PaymentStatus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Deleted",
              "displayName": "Deleted",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "OrderUID",
              "displayName": "OrderUID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -128,
        1504
      ],
      "id": "2290587c-001b-49f1-9e92-3c9651efd582",
      "name": "GS: Append Cart Line",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// n8n Code node: Build Cart Summary (old callbacks, new formatting)\n// - Keeps your original callbacks: CART|CHECKOUT, CART|CLEAR, MENU|OPEN\n// - Same cart filtering (this user only, qty>0, not frozen, not PAID)\n// - Shows *line totals* per item (qty * price or saved LineTotal)\n// - Subtotal = sum of line totals; Delivery fee stays 0.00 here\n\nconst NBSP = ' ';\nconst WIDTH = 44;\nconst money = v => `₵${{Number(v || 0).toFixed(2)}}`;\nconst asInt = (v, d = 0) => {\n  const n = Number(v);\n  return Number.isFinite(n) ? n : d;\n};\nconst asNum = (v, d = 0) => {\n  const n = Number(v);\n  return Number.isFinite(n) ? n : d;\n};\nconst md = s => String(s ?? '').replace(/([_*\\[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\nconst visLen = s => String(s).replace(/\\.|\\*|_/g, '').length;\nconst padTail = s => s + NBSP.repeat(Math.max(0, WIDTH - visLen(s)));\n\nconst ctxItem = $items('Parse Callback')?.[0]?.json ?? {};\nconst chat_id = String(ctxItem.chat_id ?? $json.chat_id ?? '');\nif (!chat_id) {\n  return [{\n    json: { method: 'noop', payload: { reason: 'missing chat_id in Build Cart Summary' } }\n  }];\n}\n\nconst allRows = $input.all().map(i => i.json);\n\nconst rows = allRows.filter(r => {\n  if (!r || !r.SKU) return false;\n  if (String(r.chat_id ?? '') !== chat_id) return false;\n  const qty = asInt(r.Quantity, 0);\n  if (qty <= 0) return false;\n  const fr = String(r.Frozen ?? '').trim().toLowerCase();\n  if (fr === 'true' || fr === '1' || fr === 'yes') return false;\n  if (String(r.PaymentStatus ?? '').trim().toUpperCase() === 'PAID') return false;\n  return true;\n});\n\nif (rows.length === 0) {\n  const text = [\n    '🧺 *Your Cart*',\n    '',\n    '_Your cart is empty._',\n    '',\n    'Tap *View Menu* to add items.'\n  ].join('\n');\n\n  const keyboard = [\n    [{ text: '📖 View Menu', callback_data: 'MENU|OPEN' }]\n  ];\n\n  return [{\n    json: {\n      method: 'sendMessage',\n      payload: {\n        chat_id,\n        text,\n        parse_mode: 'Markdown',\n        reply_markup: { inline_keyboard: keyboard }\n      }\n    }\n  }];\n}\n\nlet subtotal = 0;\n\nconst itemLines = rows.map(r => {\n  const dish  = md(String(r.Dish ?? r.SKU ?? '—'));\n  const qty   = asInt(r.Quantity, 0);\n  const unit  = asNum(r.Price, 0);\n  const lineTotal = asNum(r.LineTotal, qty * unit);\n  subtotal += lineTotal;\n  return padTail(`• ${{dish}} x${{qty}} — ${{money(lineTotal)}}`);\n});\n\nconst deliveryFee = 0;\nconst total = subtotal + deliveryFee;\n\nconst keyboard = [\n  [{ text: '🧾 Checkout', callback_data: 'CART|CHECKOUT' }],\n  [\n    { text: '🧹 Clear cart', callback_data: 'CART|CLEAR' },\n    { text: '📖 View Menu',  callback_data: 'MENU|OPEN'  }\n  ]\n];\n\nconst text = [\n  padTail('🧺 *Your Cart*'),\n  '',\n  ...itemLines,\n  '',\n  '',\n  padTail(`*Subtotal:* ${{money(subtotal)}}`),\n  padTail(`*Delivery fee:* ${{money(deliveryFee)}}`),\n  padTail(`*Total:* ${{money(total)}}`)\n].join('\n');\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id,\n      text,\n      parse_mode: 'Markdown',\n      reply_markup: { inline_keyboard: keyboard }\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1264,
        1808
      ],
      "id": "1be452be-f203-4e2a-a742-a0ec6d65bf24",
      "name": "Build Cart Summary"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "chat_id",
              "lookupValue": "={{$json.chat_id}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1456,
        1792
      ],
      "id": "a9a9e0dc-47bf-4ae6-8ff5-e8c6e58b0c23",
      "name": "GS: Read Cart (view)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1456,
        1984
      ],
      "id": "cd454700-e138-48df-99f6-97481dddf569",
      "name": "GS: Read Cart (clear)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Collect Rows To Delete — delete ONLY unpaid & unfrozen lines for this user\n\nconst ctx = $items('Parse Callback')?.[0]?.json ?? {};\nconst chat_id = String(ctx.chat_id ?? $json.chat_id ?? '');\n\nconst rows = $input.all().map(i => i.json).filter(r => String(r.chat_id ?? '') === chat_id);\n\n// helpers\nfunction isPaid(v) {\n  const s = String(v ?? '').trim().toLowerCase();\n  // allow common synonyms/flags\n  return ['paid','success','successful','confirmed','complete','completed','true','yes','1'].includes(s);\n}\nfunction isTrue(v) {\n  const s = String(v ?? '').trim().toLowerCase();\n  return ['true','1','yes'].includes(s);\n}\n\n// keep only rows we should delete: NOT paid and NOT frozen\nconst toDelete = rows\n  .filter(r => !isPaid(r.PaymentStatus) && !isTrue(r.Frozen))\n  .map(r => Number(r.row_number))\n  .filter(n => Number.isFinite(n))\n  // delete bottom-up to avoid row-shift\n  .sort((a, b) => b - a);\n\nif (toDelete.length === 0) {\n  // Signal \"nothing to delete\" to your IF node\n  return [{ json: { chat_id, none: true } }];\n}\n\n// emit one item per row_number\nreturn toDelete.map(n => ({ json: { chat_id, row_number: n } }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1232,
        1984
      ],
      "id": "5bb40c9f-e853-4c2f-9750-83c1e0889f34",
      "name": "Collect Rows To Delete"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "067a2f22-6c78-475a-8d22-e687b686da63",
              "leftValue": "={{$json.none}}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1008,
        1984
      ],
      "id": "603ac03f-4784-444e-8d87-dec900ab0262",
      "name": "IF Nothing To Delete?"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -752,
        2096
      ],
      "id": "58c05130-091a-4da0-b1b1-f0a75f319e6f",
      "name": "Split In Batches (1)"
    },
    {
      "parameters": {
        "operation": "delete",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "startIndex": "={{$json.row_number}}"
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -96,
        2128
      ],
      "id": "c7901333-002c-4a44-a5a3-64262f43f4f1",
      "name": "GS: Delete Row",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "chat_id",
              "lookupValue": "={{$items('Parse Callback')[0].json.chat_id}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1280,
        1392
      ],
      "id": "45008d93-8f63-431b-85f4-e71bf3a548a6",
      "name": "GS: Read Cart (add)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Menu",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=0"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1392,
        1600
      ],
      "id": "d57c4aa4-9056-4403-87f1-3f2894a6b932",
      "name": "GS: Read Menu (add)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "77a6c16e-5c82-4617-a7f6-49cc97372bfd",
              "leftValue": "={{ Array.isArray($json.dupes) && $json.dupes.length > 0 }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        80,
        1408
      ],
      "id": "0f7a00a4-c232-4059-9b5f-ce92e5a6569f",
      "name": "IF Has Dupes?"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        528,
        1408
      ],
      "id": "63ba0c8d-98b6-4648-adc8-d6d6e5ed1fed",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "resource": "callback",
        "queryId": "={{$json.cqid}}",
        "additionalFields": {
          "cache_time": 0,
          "show_alert": false,
          "text": "=✅ Added to cart"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -1232,
        1216
      ],
      "id": "2c2ba063-0451-4505-b5a9-01d685034e52",
      "name": "Ack Added",
      "webhookId": "3314a52f-4d80-4a4c-ab3c-9c98810700ae",
      "credentials": {
        "telegramApi": {
          "id": "GWiNIWfCwEPeHIOg",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Fan out dupes array to items with row_number\nconst chat_id = $json.chat_id;\nconst dupes = Array.isArray($json.dupes) ? $json.dupes : [];\nif (!dupes.length) return [];\nreturn dupes.map(n => ({ json: { chat_id, row_number: Number(n) } }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        304,
        1408
      ],
      "id": "43888b8e-5490-42a7-94b2-2b708715892d",
      "name": "Make Dupe Items"
    },
    {
      "parameters": {
        "operation": "delete",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "startIndex": "={{$json.row_number}}\n"
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        752,
        1408
      ],
      "id": "36c7306d-9373-4f3d-9693-68cdc169cd98",
      "name": "GS: Delete Row (Row Number = {{$json.row_number}})",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Collapse to exactly one item after the loop (or when nothing to delete)\nreturn [{ json: { chat_id: $items('Parse Callback')[0].json.chat_id } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -352,
        1904
      ],
      "id": "300cab13-5111-4208-805b-9fe6da04e922",
      "name": "Carry Chat (clear)"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Build Checkout Summary (Delivery/Pickup aware)\n * Input: items from \"Attach State → Lines (checkout)\" (cart lines with state fields attached)\n * Output: { method, payload } for Telegram\n */\n\nconst CURRENCY = '₵';\nconst WIDTH = 40;\nconst NBSP = ' ';\nconst md = s => String(s ?? '').replace(/([_*\\[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\n\nconst money  = n => `${{CURRENCY}}${{(Number(n)||0).toFixed(2)}}`;\nconst visLen = s => String(s).replace(/\\.|\\*|_/g,'').length;\nconst pad    = s => s + NBSP.repeat(Math.max(0, WIDTH - visLen(s)));\n\nconst rows = $input.all().map(i => i.json);\n\nconst chat_id = String(\n  rows[0]?.chat_id ?? rows[0]?.ChatID ?? $json._chat_id ?? $json.chat_id ?? ''\n);\n\nif (!rows.length || !chat_id) {\n  return [{\n    json: {\n      method: 'sendMessage',\n      payload: {\n        chat_id,\n        text: '🧺 Your cart is empty.\n\nTap *Menu* to add items.',\n        parse_mode: 'Markdown',\n        reply_markup: { inline_keyboard: [[{ text: '🍽️ Back to Menu', callback_data: 'MENU|REFRESH' }]] }\n      }\n    }\n  }];\n}\n\nconst fulfillmentRaw = String(rows[0]?.Fulfillment || '').toLowerCase().trim();\nconst address  = String(rows[0]?.Address  || '').trim();\nconst zone     = String(rows[0]?.Zone     || '').trim();\nconst phone    = String(rows[0]?.Phone    || '').trim();\nconst feeInput = Number(rows[0]?.DeliveryFee ?? 0);\nconst isPickup   = fulfillmentRaw === 'pickup';\nconst isDelivery = fulfillmentRaw === 'delivery';\nconst fee        = isPickup ? 0 : (Number.isFinite(feeInput) ? feeInput : 0);\n\nconst safeAddress = address ? md(address) : '';\nconst safeZone = zone ? md(zone) : '';\nconst safePhone = phone ? md(phone) : '';\n\nconst header = pad('🧺 *Your Cart*');\nconst lines = rows.map(r => {\n  const qty   = Number(r.Quantity ?? r.qty ?? 1) || 1;\n  const price = Number(r.Price ?? r.price ?? 0)  || 0;\n  const name  = md(String(r.Dish ?? r.name ?? r.SKU ?? '').trim());\n  const ltRaw = Number(r.LineTotal ?? r.line_total);\n  const lineTotal = (Number.isFinite(ltRaw) && ltRaw > 0) ? ltRaw : qty * price;\n  return pad(`• ${{name}} x${{qty}} — ${{money(lineTotal)}}`);\n});\n\nconst subtotal = rows.reduce((s, r) => {\n  const lt = Number(r.LineTotal ?? r.line_total);\n  if (Number.isFinite(lt) && lt > 0) return s + lt;\n  const q = Number(r.Quantity ?? r.qty ?? 1) || 1;\n  const p = Number(r.Price ?? r.price ?? 0)  || 0;\n  return s + q * p;\n}, 0);\n\nconst fulfillmentLine = isPickup\n  ? '🏪 Pickup at counter'\n  : (isDelivery\n     ? `🚚 Delivery${{safeAddress ? ` to: ${{safeAddress}}` : ''}}${{safeZone ? ` (Zone: ${{safeZone}})` : ''}}`\n     : '— choose delivery or pickup below —');\n\nconst meta = [\n  pad(`*Fulfillment:* ${{fulfillmentLine}}`),\n  safePhone ? pad(`*Phone:* ${{safePhone}}`) : null\n].filter(Boolean);\n\nconst foot = [\n  pad(`*Subtotal:* ${{money(subtotal)}}`),\n  pad(`*Delivery fee:* ${{money(fee)}}`),\n  pad(`*Total:* ${{money(subtotal + fee)}}`)\n];\n\nconst text = [header, '', ...lines, '', ...meta, '', ...foot].join('\n');\n\nconst baseRows = [\n  [\n    { text: '🧹 Clear', callback_data: 'CART|CLEAR' },\n    { text: '🍽️ Continue Shopping', callback_data: 'MENU|REFRESH' }\n  ]\n];\n\nlet keyboard;\nif (!isPickup && !isDelivery) {\n  keyboard = [\n    [\n      { text: '🚚 Delivery', callback_data: 'FULFILL|DELIVERY' },\n      { text: '🏪 Pickup',   callback_data: 'FULFILL|PICKUP' }\n    ],\n    ...baseRows\n  ];\n} else if (isPickup) {\n  keyboard = [\n    [{ text: '💳 Pay now', callback_data: 'PAY' }],\n    [{ text: 'Change to Delivery', callback_data: 'FULFILL|DELIVERY' }],\n    ...baseRows\n  ];\n} else {\n  if (address) {\n    keyboard = [\n      [{ text: '💳 Pay now', callback_data: 'PAY' }],\n      [{ text: 'Change to Pickup', callback_data: 'FULFILL|PICKUP' }],\n      ...baseRows\n    ];\n  } else {\n    keyboard = [\n      [{ text: '📍 Add address', callback_data: 'ADDR|CHANGE' }],\n      [{ text: 'Change to Pickup', callback_data: 'FULFILL|PICKUP' }],\n      ...baseRows\n    ];\n  }\n}\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id,\n      text,\n      parse_mode: 'Markdown',\n      reply_markup: { inline_keyboard: keyboard }\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1280,
        512
      ],
      "id": "67742e1e-1551-4098-ad50-4f1e86e2119d",
      "name": "Build Checkout Summary"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        848,
        592
      ],
      "id": "f2cdc18f-eb5e-447b-ac58-c017c6f67336",
      "name": "GS: Read Cart (checkout)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "chat_id",
              "lookupValue": "={{ $json.chat_id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1200,
        2432
      ],
      "id": "3eb7ce3e-daaa-4b78-98df-a299da841abe",
      "name": "GS: Read State(delivery)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const isCb = Boolean($json.cqid || $json.is_callback || ($json.data && $json.data.includes('|')));\nreturn isCb ? [{ json: $json }] : [];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1456,
        1216
      ],
      "id": "e368c024-10b2-414f-b9c5-9d7f99ba4c1d",
      "name": "Ack? (safe)"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "chat_id",
              "lookupValue": "={{ String($items('Normalize Event')[0].json.chat_id) }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -2128,
        368
      ],
      "id": "1d61dd17-aa3c-438a-90dd-be501cf8c4c8",
      "name": "GS: Read State (phone)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Needs Phone? — fire ONLY on text messages while awaiting phone\nconst evt = $items('Normalize Event')[0].json;   // has chat_id, text, is_callback\nconst chat_id = String(evt.chat_id || '');\nconst rows = $items().map(i => i.json);          // from GS: Read State (phone)\n\n// 1) Ignore button taps/callbacks entirely\nif (evt.is_callback === true) return [];\n\n// 2) Must be a non-empty text message\nconst text = typeof evt.text === 'string' ? evt.text.trim() : '';\nif (!text) return [];\n\n// 3) Find this user's state row\nconst row = rows.find(r => String(r.chat_id || r.ChatID) === chat_id);\nif (!row) return []; // no state row yet\n\n// 4) Only when we are truly waiting for phone\nconst fulfillment = String(row.Fulfillment || '').toLowerCase();\nconst step        = String(row.CurrentStep || '').toLowerCase();\nconst isPickupOrDelivery = (fulfillment === 'pickup' || fulfillment === 'delivery');\n\nconst needsPhone = isPickupOrDelivery && step === 'await_phone';\n\n// 5) Pass row + the text we just received forward\nreturn needsPhone ? [{\n  json: {\n    ...row,\n    _chat_id: chat_id,\n    _text: text\n  }\n}] : [];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1472,
        208
      ],
      "id": "742b9b1c-a006-4ceb-bfb3-a90381ceb9a1",
      "name": "Needs Phone?"
    },
    {
      "parameters": {
        "jsCode": "// Validate Ghana Phone — preserve incoming fields\nconst chat_id = $json._chat_id || $json.chat_id;\nconst raw = String($json._text || $json.text || '').replace(/\\s+/g, '');\n\nfunction normGhana(n) {\n  if (/^\\+?233\\d{9}$/.test(n)) {\n    const tail = n.replace(/^\\+?233/, '');\n    return { e164: '+233' + tail, local: '0' + tail };\n  }\n  if (/^0\\d{9}$/.test(n)) {\n    return { e164: '+233' + n.slice(1), local: n };\n  }\n  return null;\n}\n\nconst norm = normGhana(raw);\n\nreturn [{\n  json: {\n    ...$json,                  // << keep Fulfillment, CurrentStep, etc.\n    chat_id,\n    valid: !!norm,\n    phone_local: norm?.local || '',\n    phone_e164: norm?.e164 || ''\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1248,
        208
      ],
      "id": "a2c65944-77f2-409c-9a4b-d15b37118cca",
      "name": "Validate Ghana Phone"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0b046203-2730-477f-a9bc-fb6402e4c474",
              "leftValue": "={{$json.valid}}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1040,
        208
      ],
      "id": "e2b4d51b-3e2b-4788-865a-c2dbf4fdcec0",
      "name": "IF — is phone valid?"
    },
    {
      "parameters": {
        "jsCode": "// Reply: Invalid Phone — do NOT reference other nodes by name\nconst md = s => String(s ?? '').replace(/([_*\\[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\nconst chat_id = $json._chat_id || $json.chat_id;\n\nconst hint =\n  '⚠️ *That phone number looks invalid.*\n' +\n  'Send something like `0241234567` or `+233241234567`.';\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id,\n      text: hint,\n      parse_mode: 'Markdown',\n      reply_markup: {\n        inline_keyboard: [\n          [{ text: 'Cancel', callback_data: 'MENU|OPEN' }]\n        ]\n      }\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -592,
        320
      ],
      "id": "35869b82-a96b-4fd6-86a2-528dad145950",
      "name": "Reply: Invalid Phone"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "row_number": "={{ $items('Needs Phone?')[0].json.row_number }}",
            "Phone": "={{$json.phone_local}}",
            "CurrentStep": "await_addr",
            "UpdatedAt": "={{$now}}",
            "chat_id": "={{ $json.chat_id || $json._chat_id || $items('Normalize Event')[0].json.chat_id }}",
            "Fulfillment": "={{$json.Fulfillment}}"
          },
          "matchingColumns": [
            "chat_id"
          ],
          "schema": [
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Fulfillment",
              "displayName": "Fulfillment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Zone",
              "displayName": "Zone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "DeliveryFee",
              "displayName": "DeliveryFee",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderNumber",
              "displayName": "LastOrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderUID",
              "displayName": "LastOrderUID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "UpdatedAt",
              "displayName": "UpdatedAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CartFrozen",
              "displayName": "CartFrozen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PaymentStatus",
              "displayName": "PaymentStatus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -608,
        112
      ],
      "id": "04b83a9b-8a69-450b-9271-d52436458433",
      "name": "GS: Save Phone",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "row_number": "={{ $items('Needs Phone?')[0].json.row_number }}",
            "CurrentStep": "await_phone",
            "UpdatedAt": "={{$now}}"
          },
          "matchingColumns": [
            "row_number"
          ],
          "schema": [
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Fulfillment",
              "displayName": "Fulfillment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Zone",
              "displayName": "Zone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "DeliveryFee",
              "displayName": "DeliveryFee",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderNumber",
              "displayName": "LastOrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "UpdatedAt",
              "displayName": "UpdatedAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -144,
        336
      ],
      "id": "d8c3ad5b-becd-4f89-a563-ccd006898890",
      "name": "GS: Keep Await Phone",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Use chat_id from the current item (coming from GS: Save Phone).\nconst md = s => String(s ?? '').replace(/([_*\\[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\nconst chat_id =\n  $json.chat_id ||\n  $json._chat_id ||\n  $items('Normalize Event')[0]?.json?.chat_id;\n\nconst msg =\n  '✅ *Phone saved.*\n' +\n  'Now please *type your delivery area / address*.\n\n' +\n  'Tip: use an area keyword if possible (e.g., `osu`, `airport`, `taifa`, `achimota`, `east legon`).';\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id,\n      text: msg,\n      parse_mode: 'Markdown'\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -80,
        16
      ],
      "id": "162f91b9-e52d-4b63-9008-9e1346bd9c47",
      "name": "Reply: Ask Address"
    },
    {
      "parameters": {
        "jsCode": "const now = new Date().toISOString();\n$json._prevStep   = $json.CurrentStep || '';\n$json.Fulfillment = 'delivery';\n\n// Only move to await_phone if phone missing\nconst phone = String($json.phone || $json.Phone || '').trim();\nif (!phone) $json.CurrentStep = 'await_phone';\n\n$json.UpdatedAt = now;\nreturn [$json];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -608,
        2480
      ],
      "id": "77ad986d-1343-4dd9-a964-ed023b9c9687",
      "name": "Set Delivery Context"
    },
    {
      "parameters": {
        "jsCode": "// Try current item first (from After Update), then fall back safely.\nconst md = s => String(s ?? '').replace(/([_*\\[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\nconst chat_id =\n  $json.chat_id ??\n  $items('Set Delivery Context')[0].json.chat_id ??\n  $items('Parse Callback')[0].json.chat_id;\n\nconst text =\n  '📦 *Delivery selected.*\n' +\n  'Please reply with your *phone number* (e.g., `0241234567` or `+233241234567`).';\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id,\n      text,\n      parse_mode: 'Markdown',\n      reply_markup: {\n        inline_keyboard: [\n          [{ text: 'Change to Pickup', callback_data: 'FULFILL|PICKUP' }]\n        ]\n      }\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        960,
        2608
      ],
      "id": "44730b27-b78d-4663-84c4-fb5fea1cc8ce",
      "name": "Ask For Phone"
    },
    {
      "parameters": {
        "jsCode": "const isCb = Boolean($json.cqid || $json.is_callback || ($json.data && $json.data.includes('|')));\nreturn isCb ? [{ json: $json }] : [];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1456,
        2496
      ],
      "id": "d1921fa7-9fbd-4098-bd29-1f8dc56ae731",
      "name": "Ack? (safe)1"
    },
    {
      "parameters": {
        "jsCode": "// Has State? — always runs because it receives an item from Ack? (safe)1.\n// It inspects the parallel GS read results to decide whether a row exists.\n\nconst chatId = String(\n  $json.chat_id ??\n  $items('Parse Callback')[0]?.json?.chat_id ?? ''\n);\n\n// Use the exact node name as it appears in your left panel: GS: Read State(delivery)\nconst rows = ($items('GS: Read State(delivery)') || []).map(i => i.json);\nconst hit  = rows.find(r => String(r.chat_id) === chatId) || null;\n\nreturn [{\n  json: {\n    chat_id: chatId,\n    exists: Boolean(hit),\n    row_number: hit?.row_number ?? null\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -976,
        2560
      ],
      "id": "4140af86-593e-48c0-af63-35b52139c7e2",
      "name": "Has State?"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "98cb4d98-e5ee-4f0d-bffa-da1526253353",
              "leftValue": "={{$json.exists}}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -784,
        2624
      ],
      "id": "6bbd9738-ea47-4036-84a1-302599f56c09",
      "name": "IF State Exists?3"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "chat_id": "={{$json.chat_id}}",
            "UpdatedAt": "={{$json.UpdatedAt}}",
            "CurrentStep": "={{$json.CurrentStep}}",
            "Fulfillment": "={{$json.Fulfillment}}",
            "Zone": "={{$json.Zone}}",
            "DeliveryFee": "={{$json.DeliveryFee}}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Fulfillment",
              "displayName": "Fulfillment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Zone",
              "displayName": "Zone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "DeliveryFee",
              "displayName": "DeliveryFee",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderNumber",
              "displayName": "LastOrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderUID",
              "displayName": "LastOrderUID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "UpdatedAt",
              "displayName": "UpdatedAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CartFrozen",
              "displayName": "CartFrozen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PaymentStatus",
              "displayName": "PaymentStatus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -128,
        2720
      ],
      "id": "649852c8-cf63-4f0e-accd-1891e65b6577",
      "name": "GS: Append State (delivery)1",
      "alwaysOutputData": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const now = new Date().toISOString();\nreturn [{\n  json: {\n    chat_id: $json.chat_id,\n    username: $json.username || '',\n    Fulfillment: 'delivery',\n    CurrentStep: 'await_phone',\n    Address: '',\n    Zone: '',\n    DeliveryFee: '',\n    UpdatedAt: now\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -560,
        2720
      ],
      "id": "efcd713f-db2f-4bb6-af98-3aadfcf096a1",
      "name": "Set Delivery Context (create)"
    },
    {
      "parameters": {
        "jsCode": "/** Fire only on text when the user should provide an address. */\nconst rows = ($items('GS: Read State (phone)') || []).map(i => i.json);\nconst evt  = $items('Normalize Event')[0]?.json || {};\nif (evt.is_callback) return [];\n\nconst chat_id = evt.chat_id;\nconst text    = (evt.text || '').trim();\nif (!text) return [];\n\n// NEW: ignore if message looks like a phone number (0XXXXXXXXX or +233XXXXXXXXX)\nconst digits = text.replace(/\\s+/g, '');\nif (/^(0\\d{9}|\\+?233\\d{9})$/.test(digits)) return [];\n\nconst row = rows.find(r => String(r.chat_id) === String(chat_id));\nif (!row) return [];\n\nconst fulfillment = (row.Fulfillment || '').toLowerCase().trim();\nconst step        = (row.CurrentStep || '').toLowerCase().trim();\n\nconst needsAddr = (fulfillment === 'delivery') && (step === 'await_addr');\nreturn needsAddr ? [{ json: { chat_id, address_text: text } }] : [];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1648,
        624
      ],
      "id": "3a009afa-d95c-4691-8591-9860df3e3ce9",
      "name": "Needs Address?"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 929019370,
          "mode": "list",
          "cachedResultName": "DeliveryZones",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=929019370"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1232,
        400
      ],
      "id": "59f451a3-5d72-42f6-8ebe-f41ced71cb26",
      "name": "GS: Read Zones",
      "alwaysOutputData": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Inputs\nconst chat_id = String($json.chat_id ?? '');\nconst address_raw = String($json.address_text ?? '').trim();\nconst address = address_raw.toLowerCase();\n\n// Zones table from GS: Read Zones (5 items in your run)\nconst rows = ($items('GS: Read Zones') || []).map(i => i.json);\n\n// Build \"available\" (only those marked true)\nconst available = rows\n  .filter(r => String(r.Available).toLowerCase() === 'true')\n  .map(r => String(r.ZoneName || '').trim())\n  .filter(Boolean);\n\n// Find first matching zone by keyword (case-insensitive; comma-separated tokens supported)\nlet hit = null;\nfor (const r of rows) {\n  const kw = String(r.Keyword || '').toLowerCase();\n  if (!kw) continue;\n  const tokens = kw.split(',').map(s => s.trim()).filter(Boolean);\n  if (tokens.some(t => address.includes(t))) {\n    hit = r;\n    break;\n  }\n}\n\n// Always return an array of ONE object\nif (hit) {\n  return [{\n    json: {\n      chat_id,\n      address_text: address_raw,\n      found: true,\n      Zone: String(hit.ZoneName || '').trim(),\n      DeliveryFee: Number(hit.DeliveryFee || 0),\n      available,\n    }\n  }];\n} else {\n  return [{\n    json: {\n      chat_id,\n      address_text: address_raw,\n      found: false,\n      available,\n    }\n  }];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1248,
        592
      ],
      "id": "fa42aed1-018c-4c2a-baf5-1dc54ce9bd96",
      "name": "Find Zone"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "3180f57e-c6b3-4132-9713-0eb174b9210d",
              "leftValue": "={{ $json.found }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1024,
        592
      ],
      "id": "2377e57c-b61b-453e-952c-0215646fa340",
      "name": "IF Zone Found?"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Address": "={{ $json.address_text }}",
            "Zone": "={{$json.Zone}}",
            "DeliveryFee": "={{ Number($json.DeliveryFee || 0) }}",
            "CurrentStep": "=await_confirm",
            "UpdatedAt": "={{ $now }}",
            "chat_id": "={{ $json.chat_id }}",
            "LastOrderNumber": "={{$json.OrderNumber}}"
          },
          "matchingColumns": [
            "chat_id"
          ],
          "schema": [
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Fulfillment",
              "displayName": "Fulfillment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Zone",
              "displayName": "Zone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "DeliveryFee",
              "displayName": "DeliveryFee",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderNumber",
              "displayName": "LastOrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderUID",
              "displayName": "LastOrderUID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "UpdatedAt",
              "displayName": "UpdatedAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CartFrozen",
              "displayName": "CartFrozen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PaymentStatus",
              "displayName": "PaymentStatus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -592,
        512
      ],
      "id": "55d07fcd-9982-46ef-84d0-0841e611a9dc",
      "name": "GS: Update State (address)",
      "alwaysOutputData": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Reply: Address OK  — returns a Telegram sendMessage payload\nconst md = s => String(s ?? '').replace(/([_*\\[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\nconst chat_id = $json.chat_id;\n\nconst address = String($json.Address ?? '').trim();\nconst zone    = String($json.Zone ?? '').trim();\n\nconst rawFee  = $json.DeliveryFee;\nconst feeNum  = (rawFee === '' || rawFee === null || rawFee === undefined)\n  ? null\n  : Number(rawFee);\nconst feeText = (feeNum !== null && !Number.isNaN(feeNum)) ? `₵${{feeNum}}` : 'to be confirmed';\n\nconst safeAddress = address ? md(address) : '—';\nconst safeZone = zone ? md(zone) : '—';\n\nconst text = [\n  '📍 *Address saved*',\n  '',\n  `*Address:* ${{safeAddress}}`,\n  `*Zone:* ${{safeZone}}`,\n  `*Delivery fee:* ${{feeText}}`,\n  '',\n  'Use the buttons below, or type a new address to change it.'\n].join('\n');\n\nconst reply_markup = {\n  inline_keyboard: [\n    [{ text: '✅ Checkout',        callback_data: 'CHECKOUT|START' }],\n    [{ text: '✏️ Change address',  callback_data: 'ADDR|CHANGE' }],\n    [{ text: '🔁 Change to Pickup',callback_data: 'FULFILL|PICKUP' }],\n  ]\n};\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id,\n      text,\n      parse_mode: 'Markdown',\n      disable_web_page_preview: true,\n      reply_markup\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -368,
        512
      ],
      "id": "38609a0a-d93b-4e1f-baa2-717adf9f86c4",
      "name": "Reply: Address OK"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Reply: Zone Not Found — Code v2 (single-output)\n * IN: items containing { chat_id, address_text, available[] }\n * OUT: [{ json: { method, payload } }] for Telegram sender\n */\nconst md = s => String(s ?? '').replace(/([_*\\[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\nconst items = $input.all();\n\nconst out = items.map(it => {\n  const j = it?.json || {};\n  const chatId = String(j.chat_id || '').trim();\n  const addr   = (j.address_text ?? '').toString().trim();\n  const zones  = Array.isArray(j.available) ? j.available : [];\n\n  const list = zones.map(z => `• ${{md(z)}}`).join('\n');\n  const displayAddr = addr ? md(addr) : 'your area';\n  const text = [\n    `❌ I couldn’t match “${{displayAddr}}” to a delivery zone.`,\n    '',\n    'Reply *with the area name* (just the name), e.g.:',\n    list || '• East Legon\n• Airport\n• Osu\n• Taifa\n• Achimota',\n  ].join('\n');\n\n  return {\n    json: {\n      method: 'sendMessage',\n      payload: {\n        chat_id: chatId,\n        text,\n        parse_mode: 'Markdown',\n        disable_web_page_preview: true,\n        reply_markup: { force_reply: true }\n      }\n    }\n  };\n});\n\nreturn out;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -624,
        688
      ],
      "id": "ffda4bc7-d3df-4bbf-a957-dfcbc9c55f1e",
      "name": "Reply: Zone Not Found"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "chat_id": "={{ $json.chat_id }}",
            "CurrentStep": "={{$json.CurrentStep}}",
            "Fulfillment": "={{$json.Fulfillment}}",
            "UpdatedAt": "={{$json.UpdatedAt}}"
          },
          "matchingColumns": [
            "chat_id"
          ],
          "schema": [
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Fulfillment",
              "displayName": "Fulfillment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Zone",
              "displayName": "Zone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "DeliveryFee",
              "displayName": "DeliveryFee",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderNumber",
              "displayName": "LastOrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderUID",
              "displayName": "LastOrderUID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "UpdatedAt",
              "displayName": "UpdatedAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CartFrozen",
              "displayName": "CartFrozen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PaymentStatus",
              "displayName": "PaymentStatus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -128,
        2416
      ],
      "id": "23c95f30-0133-49ce-8c49-a3a5f19997ad",
      "name": "GS: Update State (delivery)1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "/**\n * Set user to await_addr so the next TEXT message will be treated as a new address.\n * Also clear Zone/Fee so they’ll be recomputed.\n */\nreturn [{\n  json: {\n    chat_id: $json.chat_id,        // comes from Parse Callback → Action Router\n    CurrentStep: 'await_addr',\n    Zone: '',\n    DeliveryFee: '',\n    UpdatedAt: $now\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1232,
        3248
      ],
      "id": "eafee4cd-22d7-41c4-8296-af4c90ed41b4",
      "name": "Set Await Address (code)"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "chat_id": "={{$json.chat_id}}",
            "CurrentStep": "={{$json.CurrentStep}}",
            "Zone": "={{$json.Zone}}",
            "DeliveryFee": "={{$json.DeliveryFee}}",
            "UpdatedAt": "={{$json.UpdatedAt}}"
          },
          "matchingColumns": [
            "chat_id"
          ],
          "schema": [
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Fulfillment",
              "displayName": "Fulfillment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Zone",
              "displayName": "Zone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "DeliveryFee",
              "displayName": "DeliveryFee",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderNumber",
              "displayName": "LastOrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "UpdatedAt",
              "displayName": "UpdatedAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1008,
        3248
      ],
      "id": "fb613f50-f330-473f-b5a7-7d2f67606e46",
      "name": "Update row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const isCb = Boolean($json.cqid || $json.is_callback || ($json.data && $json.data.includes('|')));\nreturn isCb ? [{ json: $json }] : [];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1456,
        3248
      ],
      "id": "c93039c4-1f5f-4144-bc5f-a07b8a9d4b09",
      "name": "Ack? (safe)2"
    },
    {
      "parameters": {
        "jsCode": "const isCb = Boolean($json.cqid || $json.is_callback || ($json.data && $json.data.includes('|')));\nreturn isCb ? [{ json: $json }] : [];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1456,
        3536
      ],
      "id": "5e95c227-b301-4a00-a34a-304a4b1492a8",
      "name": "Ack? (safe)3"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1232,
        3440
      ],
      "id": "56ed1796-5edd-4c46-9a0f-cbaaf2f2f6a1",
      "name": "GS: Read Cart",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// filter Cart — keep ONLY active, unpaid, unfrozen lines for THIS user (qty > 0)\n\n// get current chat_id from Parse Callback (or current item)\nconst ctx = $items('Parse Callback')?.[0]?.json ?? {};\nconst chat_id = String(ctx.chat_id ?? $json.chat_id ?? '');\n\n// helpers\nconst asInt = (v, d = 0) => {\n  const n = Number(v);\n  return Number.isFinite(n) ? n : d;\n};\nconst isTrue = (v) => ['true','1','yes'].includes(String(v ?? '').trim().toLowerCase());\nconst isPaid = (v) => ['paid','success','successful','confirmed','complete','completed','true','yes','1']\n  .includes(String(v ?? '').trim().toLowerCase());\n\n// source rows from GS: Read Cart (previous node)\nconst rows = $input.all().map(i => i.json);\n\n// apply filters\nconst active = rows.filter(r => {\n  if (!r || !r.SKU) return false;                  // must be a cart line\n  if (String(r.chat_id ?? '') !== chat_id) return false; // this user only\n  if (asInt(r.Quantity, 0) <= 0) return false;     // qty > 0\n  if (isTrue(r.Frozen)) return false;              // drop frozen\n  if (isPaid(r.PaymentStatus)) return false;       // drop paid\n  return true;\n});\n\n// emit same shape items for downstream nodes\nreturn active.map(r => ({ json: r }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1008,
        3440
      ],
      "id": "38c33ab2-d41c-45a3-aa5b-6c539867712a",
      "name": "filter Cart"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Build a pre-payment checkout summary (Markdown) in user's existing style.\n * Accepts cart rows and one state row in ANY order.\n * Expects columns in cart: Dish, SKU, Price, Quantity, LineTotal\n * Expects state: Fulfillment, Zone, DeliveryFee\n */\nconst md = s => String(s ?? '').replace(/([_*\\[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\nconst CURRENCY = '¢';\nconst HEADER = '🧾 *Checkout*';\nconst EMPTY = 'Your cart is empty.\n\nTap *Menu* to add items.';\n\nconst clean = v => (v ?? '').toString().trim();\nconst num = v => {\n  const n = parseFloat(v);\n  return Number.isFinite(n) ? n : 0;\n};\nconst money = v => `${{CURRENCY}}${{(Math.round(num(v) * 100) / 100).toString()}}`;\n\nlet cart = [];\nlet state = {};\n\nfor (const item of $input.all()) {\n  const j = item.json || {};\n  if ('Fulfillment' in j || 'Zone' in j || 'DeliveryFee' in j) {\n    if (!state.chat_id && j.chat_id) state = j;\n  } else {\n    cart.push(j);\n  }\n}\n\nif (Array.isArray(state) && state.length) state = state[0];\n\nconst chat_id = $json.chat_id\n  ?? state.chat_id\n  ?? $items(0)[0]?.json?.chat_id\n  ?? $items(1)[0]?.json?.chat_id;\n\nlet lines = [];\nlet subtotal = 0;\n\nfor (const row of cart) {\n  const dishRaw = clean(row.Dish || row.Item || row.Name);\n  const dish = md(dishRaw);\n  const qty  = num(row.Quantity);\n  const price = num(row.Price);\n  const line = num(row.LineTotal) || qty * price;\n\n  if (!dishRaw || qty <= 0) continue;\n\n  subtotal += line;\n  lines.push(`• ${{dish}}  x${{qty}}  —  ${{money(line)}}`);\n}\n\nconst hasItems = lines.length > 0;\n\nconst fulfillmentRaw = clean(state.Fulfillment).toLowerCase();\nconst fulfillment = fulfillmentRaw || '';\nconst zoneRaw = clean(state.Zone);\nconst zone = zoneRaw ? md(zoneRaw) : '—';\nconst deliveryFee = num(state.DeliveryFee);\nconst isDelivery = fulfillment === 'delivery';\n\nconst feeLine =\n  isDelivery\n    ? (deliveryFee > 0\n        ? `\nDelivery fee (${{zone}}): *${{money(deliveryFee)}}*`\n        : `\nDelivery fee: *—*`)\n    : '';\n\nconst total = subtotal + (isDelivery ? deliveryFee : 0);\n\nlet text;\nif (!hasItems) {\n  text = EMPTY;\n} else {\n  const safeFulfillment = md(fulfillment || '—');\n  text =\n    `${{HEADER}}\n\n` +\n    `${{lines.join('\n')}}\n\n` +\n    `Subtotal: *${{money(subtotal)}}*` +\n    `${{feeLine}}` +\n    `\nTotal: *${{money(total)}}*` +\n    `\n\nFulfillment: *${{safeFulfillment}}*` +\n    (isDelivery && !zoneRaw ? `\nZone: *—* (tap “✏️ Change address”)` : '');\n}\n\nconst keyboard = hasItems\n  ? [\n      [\n        { text: '✅ Proceed to pay', callback_data: 'PAY|INSTR' }\n      ],\n      [\n        { text: '✏️ Change address', callback_data: 'ADDR|CHANGE' },\n        { text: '🚗 Change to Pickup', callback_data: 'FULFILL|PICKUP' }\n      ],\n      [\n        { text: '🧹 Clear cart', callback_data: 'CART|CLEAR' },\n        { text: '📜 Menu', callback_data: 'MENU' }\n      ]\n    ]\n  : [\n      [\n        { text: '📜 Menu', callback_data: 'MENU' }\n      ]\n    ];\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id,\n      text,\n      parse_mode: 'Markdown',\n      reply_markup: { inline_keyboard: keyboard }\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -560,
        3536
      ],
      "id": "9abfcc2f-2771-49fe-ba31-985632f4c69e",
      "name": "Build Checkout Summary (code)"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "chat_id",
              "lookupValue": "={{$json.chat_id}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1008,
        3632
      ],
      "id": "3ad01ca8-09a7-4263-b393-05f0ac1dac24",
      "name": "GS: Read State1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -784,
        3536
      ],
      "id": "113e91f9-f458-48de-af2a-9d2b853c4daf",
      "name": "Join: Cart+State"
    },
    {
      "parameters": {
        "jsCode": "const isCb = Boolean($json.cqid || $json.is_callback || ($json.data && $json.data.includes('|')));\nreturn isCb ? [{ json: $json }] : [];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1456,
        3952
      ],
      "id": "34982762-985e-4f7a-be33-3842f0fe0fd4",
      "name": "Ack?(safe)"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "chat_id",
              "lookupValue": "={{$json.chat_id}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1232,
        3856
      ],
      "id": "677e7b65-7d3d-42a4-b5ef-9c6e217cd619",
      "name": "GS: Read Cart1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "chat_id",
              "lookupValue": "={{$json.chat_id}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1040,
        4096
      ],
      "id": "07dd8d92-3c9c-44d2-903d-c758481c8e39",
      "name": "GS: Read State (UserStates)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Expect input items from \"Join: Cart + OrderNo\" (one per cart row)\n// Each should have row_number and OrderNumber\nconst out = [];\nfor (const it of $input.all()) {\n  const j = it.json || {};\n  if (j.row_number != null && j.OrderNumber) {\n    out.push({ json: { row_number: j.row_number, OrderNumber: j.OrderNumber } });\n  }\n}\n// If nothing matched, don't break downstream—just emit nothing\nreturn out;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        432,
        3840
      ],
      "id": "b292bdd9-0e7b-44c3-bc4e-676fc5de6312",
      "name": "Prepare Line Updates"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code node: Build Payment Instructions (FULL VERSION)\n// - Fixes subtotal=0 (SKU-first split)\n// - Adds \"Back to checkout\" button\n// - Strong visual emphasis on TOTAL\n// -----------------------------------------------------------\nconst md = s => String(s ?? '').replace(/([_*\\[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\n\nconst CONSTANTS = {\n  BrandName:  'Sefake Kitchen',\n  MomoName:   'Sefake Kitchen',\n  MomoNumber: '024XXXXXXX',\n  BACK_TO_CHECKOUT_DATA: 'CART|CHECKOUT',\n};\n\nconst num = (v, d = 0) => {\n  const s = String(v ?? '').replace(/[, ]/g, '');\n  const n = Number(s);\n  return Number.isFinite(n) ? n : d;\n};\nconst fmt  = (v) => `¢${{Number(v).toLocaleString('en-GH', { maximumFractionDigits: 2 })}}`;\nconst safe = (s) => (s == null ? '' : String(s).trim());\nconst shortRef = (ref) => (ref ? String(ref).trim() : '');\n\nconst rows = items.map(it => it.json);\n\nlet cart = [];\nlet order = {};\nfor (const j of rows) {\n  const isCartish  = !!(j.SKU || j.Dish || j.Item || j.Name);\n  const isStateish = ('Fulfillment' in j) || ('DeliveryFee' in j) || ('Zone' in j) || ('chat_id' in j);\n\n  if (isCartish) {\n    cart.push(j);\n    if (!order.OrderNumber && j.OrderNumber) order.OrderNumber = safe(j.OrderNumber);\n    if (!order.chat_id    && j.chat_id)     order.chat_id    = j.chat_id;\n  } else if (isStateish) {\n    if (!order.chat_id && j.chat_id) order = { ...j, ...order };\n    else order = { ...order, ...j };\n    if (!order.OrderNumber && j.OrderNumber) order.OrderNumber = safe(j.OrderNumber);\n  } else if (j.OrderNumber && !order.OrderNumber) {\n    order.OrderNumber = safe(j.OrderNumber);\n  }\n}\n\nconst BrandName   = safe(order.BrandName)   || CONSTANTS.BrandName;\nconst MomoName    = safe(order.MomoName)    || CONSTANTS.MomoName;\nconst MomoNumber  = safe(order.MomoNumber)  || CONSTANTS.MomoNumber;\nconst BACK_CB     = CONSTANTS.BACK_TO_CHECKOUT_DATA;\n\nlet subtotal = 0;\nfor (const line of cart) {\n  const lt   = num(line.LineTotal);\n  const p    = num(line.Price);\n  const qty  = num(line.Quantity, 1);\n  subtotal  += (Number.isFinite(lt) && lt > 0) ? lt : (p * qty);\n}\nconst deliveryFee = num(order.DeliveryFee, 0);\nconst total       = subtotal + deliveryFee;\n\nconst refCodeRaw = shortRef(order.OrderNumber || order.OrderUID || order.OrderId || '');\nconst refCode = md(refCodeRaw);\nconst chat_id = order.chat_id || order.ChatID || order.chatid || order.user_id;\n\nconst headline = '💳 *Payment for Order*' + (refCodeRaw ? `\nRef: *${{refCode}}*` : '');\nconst breakdown = [\n  `Subtotal: *${{fmt(subtotal)}}*`,\n  ...(deliveryFee > 0 ? [`Delivery fee: *${{fmt(deliveryFee)}}*`] : []),\n].join('\n');\n\nconst totalPanel = [\n  '━━━━━━━━━━━━━━━━━━━━',\n  `💥 *TOTAL TO PAY: ${{fmt(total)}}*`,\n  '━━━━━━━━━━━━━━━━━━━━',\n].join('\n');\n\nlet lines = [];\nlines.push(headline);\nlines.push('');\nlines.push(breakdown);\nlines.push(totalPanel);\nlines.push('');\nlines.push('🟡 *Very important*');\nif (refCodeRaw) {\n  lines.push('When paying, type this in the *Reference/Reason/Message* field:');\n  lines.push(`🧾 *${{refCode}}*`);\n}\nlines.push('This lets our admin match your payment quickly.');\nlines.push('');\nlines.push('📲 *MoMo Details*');\nlines.push(`• Number: ${{md(MomoNumber)}}`);\nlines.push(`• Name: ${{md(MomoName)}}`);\nlines.push('');\nlines.push('After paying, tap *I have paid*. Or tap *Back to checkout* to review your order.');\nconst text = lines.join('\n');\n\nconst confirmCb = `PAY|CONFIRM|${{refCodeRaw || 'UNKNOWN'}}`;\nconst reply_markup = {\n  inline_keyboard: [\n    [{ text: '✅ I have paid',      callback_data: confirmCb }],\n    [{ text: '⬅️ Back to checkout', callback_data: BACK_CB }],\n  ],\n};\n\nreturn [\n  {\n    json: {\n      method: 'sendMessage',\n      payload: {\n        chat_id,\n        text,\n        parse_mode: 'Markdown',\n        reply_markup,\n      },\n    },\n  },\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        736,
        4096
      ],
      "id": "ede1075b-bd30-43ea-a582-6ef9aeae1fa4",
      "name": "Build Payment Instructions"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "chat_id": "={{$json.chat_id}}",
            "CurrentStep": "=await_payment",
            "LastOrderNumber": "={{$json.OrderNumber}}",
            "UpdatedAt": "={{$now}}",
            "LastOrderUID": "={{$json.OrderNumber}}"
          },
          "matchingColumns": [
            "chat_id"
          ],
          "schema": [
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Fulfillment",
              "displayName": "Fulfillment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Zone",
              "displayName": "Zone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "DeliveryFee",
              "displayName": "DeliveryFee",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderNumber",
              "displayName": "LastOrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderUID",
              "displayName": "LastOrderUID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "UpdatedAt",
              "displayName": "UpdatedAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        592,
        3536
      ],
      "id": "b471d08d-5d70-46e7-9c83-201308b3bcfb",
      "name": "GS: Update State (await_payment + LastOrderNumber)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Input: all active cart lines (current cart)\n// Output: one meta object with { OrderNumber, OrderUID, [DeliveryFee] }\n\nconst items = $input.all().map(i => i.json);\n\n// Helpers\nconst isTrue = v => v === true || String(v).toLowerCase() === 'true';\nconst num = v => {\n  const n = parseFloat(v);\n  return Number.isFinite(n) ? n : undefined;\n};\n// Find the first present DeliveryFee across inputs (supports a few key styles)\nconst findDeliveryFee = () => {\n  for (const j of items) {\n    const v =\n      j?.DeliveryFee ??\n      j?.deliveryFee ??\n      j?.delivery_fee;\n    const n = num(v);\n    if (n !== undefined) return n;\n  }\n  return undefined;\n};\nconst deliveryFee = findDeliveryFee();\n\n// 1) If any UNFROZEN line already has an OrderNumber, reuse it (same active cart)\nconst existing = items.find(l => !isTrue(l.Frozen) && String(l.OrderNumber || '').trim() !== '');\nif (existing) {\n  return [{\n    json: {\n      OrderNumber: String(existing.OrderNumber),\n      OrderUID: String(existing.OrderNumber),\n      ...(deliveryFee !== undefined ? { DeliveryFee: deliveryFee } : {})\n    }\n  }];\n}\n\n// 2) Otherwise mint a fresh short, low-collision ref\nconst chatId = (items[0]?.chat_id ?? '') + '';\nfunction makeRef(chatIdStr) {\n  const t = Date.now(); // ms\n  // 4 chars of rolling time + 3 chars of a tiny hash of (chat_id + t) => 7 chars total\n  const time4 = (t % (36 ** 4)).toString(36).toUpperCase().padStart(4, '0');\n  let h = 0; const s = chatIdStr + '|' + t;\n  for (let i = 0; i < s.length; i++) h = ((h * 31) + s.charCodeAt(i)) >>> 0;\n  const tail3 = (h % (36 ** 3)).toString(36).toUpperCase().padStart(3, '0');\n  return `SFK-${time4}${tail3}`; // e.g., SFK-7Q9KX1J (7 after dash)\n}\n\nconst ref = makeRef(chatId);\nreturn [{\n  json: {\n    OrderNumber: ref,\n    OrderUID: ref,\n    ...(deliveryFee !== undefined ? { DeliveryFee: deliveryFee } : {})\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -688,
        4112
      ],
      "id": "e72e8357-fa2d-4bce-8422-b941a8bd4eb0",
      "name": "Ensure Order Number"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "row_number": "={{$json.row_number}}",
            "OrderNumber": "={{$json.OrderNumber}}",
            "PaymentStatus": "PENDING"
          },
          "matchingColumns": [
            "row_number"
          ],
          "schema": [
            {
              "id": "Timestamp",
              "displayName": "Timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LineId",
              "displayName": "LineId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "SKU",
              "displayName": "SKU",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Dish",
              "displayName": "Dish",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Price",
              "displayName": "Price",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Quantity",
              "displayName": "Quantity",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LineTotal",
              "displayName": "LineTotal",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "OrderNumber",
              "displayName": "OrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Frozen",
              "displayName": "Frozen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PaymentStatus",
              "displayName": "PaymentStatus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        944,
        3856
      ],
      "id": "69392707-3dad-4bab-a565-89c1331c4ebf",
      "name": "GS: Update Lines (Orders)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// filter Cart — keep ONLY active, unpaid, unfrozen lines for THIS user (qty > 0)\n\n// get current chat_id from Parse Callback (or current item)\nconst ctx = $items('Parse Callback')?.[0]?.json ?? {};\nconst chat_id = String(ctx.chat_id ?? $json.chat_id ?? '');\n\n// helpers\nconst asInt = (v, d = 0) => {\n  const n = Number(v);\n  return Number.isFinite(n) ? n : d;\n};\nconst isTrue = (v) => ['true','1','yes'].includes(String(v ?? '').trim().toLowerCase());\nconst isPaid = (v) => ['paid','success','successful','confirmed','complete','completed','true','yes','1']\n  .includes(String(v ?? '').trim().toLowerCase());\n\n// source rows from GS: Read Cart (previous node)\nconst rows = $input.all().map(i => i.json);\n\n// apply filters\nconst active = rows.filter(r => {\n  if (!r || !r.SKU) return false;                  // must be a cart line\n  if (String(r.chat_id ?? '') !== chat_id) return false; // this user only\n  if (asInt(r.Quantity, 0) <= 0) return false;     // qty > 0\n  if (isTrue(r.Frozen)) return false;              // drop frozen\n  if (isPaid(r.PaymentStatus)) return false;       // drop paid\n  return true;\n});\n\n// emit same shape items for downstream nodes\nreturn active.map(r => ({ json: r }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1008,
        3856
      ],
      "id": "f965b382-108f-44b8-9c59-b6131fd5b17c",
      "name": "filter Cart (qty>0)"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -480,
        3856
      ],
      "id": "e3edc422-d95c-420e-8c9d-38113849d5d8",
      "name": "Join: Cart + OrderNo"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        512,
        4096
      ],
      "id": "43f220bd-2908-4995-8e78-b9274db0053b",
      "name": "Join: PayCard Inputs"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.data }}",
                    "rightValue": "PAY|CONFIRM",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    },
                    "id": "2accc4da-cda9-4d0f-ba1f-43e8f7a549b8"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "confirm"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -7040,
        2544
      ],
      "id": "f875bfa9-92f0-46e9-bad7-18bd064c616e",
      "name": "PAY|CONFIRM?"
    },
    {
      "parameters": {
        "jsCode": "// Extracts PAY|CONFIRM|REF from callback data and keeps chat context\nconst data = String($json.data || '');\nconst parts = data.split('|'); // [\"PAY\",\"CONFIRM\",\"REF\"]\nconst ref = (parts[2] || '').trim();\n\nreturn [{\n  json: {\n    chat_id: String($json.chat_id || ''),\n    ref,\n    message_id: $json.message_id || null,\n    cqid: $json.cqid || null,   // callback_query_id for answerCallbackQuery\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -6400,
        2544
      ],
      "id": "b69d12c4-a216-44ba-ae3a-c57f8bec5d00",
      "name": "Extract PAY|CONFIRM Ref"
    },
    {
      "parameters": {
        "jsCode": "// Immediately answer the callback to stop the spinner\nconst md = s => String(s ?? '').replace(/([_*\\[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\nreturn [{\n  json: {\n    method: 'answerCallbackQuery',\n    payload: {\n      callback_query_id: $json.cqid,\n      text: 'Thanks! Checking payment…',\n      show_alert: false,\n      cache_time: 2,\n    },\n  },\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -6176,
        2736
      ],
      "id": "beed2de0-4dff-4f0c-b56d-8730a5c4b7b2",
      "name": "Answer Callback (immediate)"
    },
    {
      "parameters": {
        "jsCode": "const md = s => String(s ?? '').replace(/([_*\\[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\nconst chat_id = $items('Extract PAY|CONFIRM Ref')[0].json.chat_id;\nconst refRaw = $items('Extract PAY|CONFIRM Ref')[0].json.ref;\nconst ref = refRaw ? md(refRaw) : '';\n\nconst text = [\n  '⚠️ *Payment reference not recognised*',\n  ref ? `Ref: *${{ref}}*` : '',\n  '',\n  'Double-check the code and tap *I have paid* again, or contact support below.'\n].filter(Boolean).join('\n');\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id,\n      text,\n      parse_mode: 'Markdown',\n      reply_markup: {\n        inline_keyboard: [\n          [{ text: '🔁 Try again', callback_data: 'PAY|INSTR' }],\n          [{ text: '☎️ Contact support', callback_data: 'HELP|AGENT' }]\n        ]\n      }\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4832,
        2448
      ],
      "id": "66705ce8-7472-41b4-ad15-bc5d913ba719",
      "name": "Reply: Ref Not Found"
    },
    {
      "parameters": {
        "jsCode": "// Build a simple \"processing payment\" message for the customer\nconst md = s => String(s ?? '').replace(/([_*\\[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\nconst ref = md($json.ref || 'UNKNOWN');\nconst chat_id = $json.chat_id;\n\nconst text = [\n  '💳 *Processing your payment...*',\n  `Ref: *${{ref}}*`,\n  '',\n  '_Please wait a moment while we confirm your payment._'\n].join('\n');\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id,\n      text,\n      parse_mode: 'Markdown',\n      reply_markup: {\n        inline_keyboard: [\n          [{ text: '⬅️ Back to checkout', callback_data: 'CART|CHECKOUT' }],\n          [{ text: '☎️ Contact support', callback_data: 'HELP|AGENT' }]\n        ]\n      }\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -6176,
        2544
      ],
      "id": "6876d1c9-8dc1-4f4f-afed-9493b044a53c",
      "name": "Build Customer Processing Message"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b187d5db-ac97-499b-b3ae-ccdee5719f0a",
              "leftValue": "={{ $json.OrderNumber }}",
              "rightValue": "={{ $items(\"Extract PAY|CONFIRM Ref\")[0].json.ref }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "d18b778a-97d8-4bcc-a0c0-b4cda3fef181",
              "leftValue": "={{ String($json.chat_id) }}",
              "rightValue": "={{ String($items(\"Extract PAY|CONFIRM Ref\")[0].json.chat_id) }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -5952,
        2352
      ],
      "id": "35e32ca7-7167-4b54-86dc-a640c1277b0e",
      "name": "IF: OrderNumber matches ref (IF)"
    },
    {
      "parameters": {
        "jsCode": "// Aggregate all rows that passed the IF (these are the actual cart lines)\nconst refCtx   = $items('Extract PAY|CONFIRM Ref')[0].json;\nconst chat_id  = String(refCtx.chat_id || '');\nconst ref      = String(refCtx.ref || '');\n\nconst lines = $input.all().map(i => i.json);\n\n// Compute money\nconst money = n => `₵${(Number(n)||0).toFixed(2)}`;\nlet subtotal = 0;\nfor (const l of lines) {\n  const lt = Number(l.LineTotal || 0);\n  const p  = Number(l.Price || 0);\n  const q  = Number(l.Quantity || 1);\n  subtotal += lt > 0 ? lt : (p * q);\n}\n\n// Delivery fee (if present on any line; else 0)\nconst deliveryFee = Number((lines.find(l => l.DeliveryFee != null)?.DeliveryFee) || 0);\nconst total = subtotal + deliveryFee;\n\n// Compact item lines (for kitchen msg later)\nconst itemLines = lines.map(l => `• ${l.Dish || l.SKU} x${l.Quantity} — ${money(l.LineTotal || (l.Price||0)*(l.Quantity||1))}`);\n\nreturn [{\n  json: { chat_id, ref, lines, subtotal, deliveryFee, total, itemLines }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5728,
        2352
      ],
      "id": "b2797011-80ce-40a9-9da6-90a62ff04501",
      "name": "Aggregate Lines & Totals"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -5280,
        2272
      ],
      "id": "f8ee86b9-310e-473e-909c-4426e0bdda0b",
      "name": "GS: Read Orders (by ref)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "/**\n * Enrich the aggregated cart with DeliveryFee (and Fulfillment) from Orders.\n * Matches by (OrderNumber OR LastOrderNumber) AND chat_id.\n */\n\nfunction normalizeRows(arr) {\n  const rows = [];\n  for (const it of arr) {\n    const j = it.json || {};\n    if (Array.isArray(j.data)) rows.push(...j.data);\n    else rows.push(j);\n  }\n  return rows;\n}\n\n// Aggregated payload from previous step\nconst agg      = $items('Aggregate Lines & Totals')[0].json;\nconst ref      = String(agg.ref || '').trim();\nconst chat_id  = String(agg.chat_id || '').trim();\n\n// All rows coming from \"GS: Read Orders (by ref)\"\nconst ordersRows = normalizeRows($input.all());\n\n// Find a row where (OrderNumber == ref OR LastOrderNumber == ref) AND chat_id matches\nconst order = ordersRows.find(r => {\n  const rChat = String(r.chat_id ?? '').trim();\n  const ord   = String(r.OrderNumber ?? '').trim();\n  const last  = String(r.LastOrderNumber ?? '').trim();\n  return rChat === chat_id && (ord === ref || last === ref);\n}) || {};\n\n// Pull values & recompute\nconst deliveryFee = Number(order.DeliveryFee ?? order.deliveryFee ?? 0);\nconst fulfillment = String(order.Fulfillment ?? order.fulfillment ?? '');\nconst orderRowNum = order.row_number ?? null;\n\nreturn [{\n  json: {\n    ...agg,\n    deliveryFee,\n    total: Number(agg.subtotal || 0) + deliveryFee,\n    fulfillment,\n    orderRow_number: orderRowNum\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4832,
        2224
      ],
      "id": "3cbb4e5b-f99e-4583-8c4f-70125d66d95c",
      "name": "Attach Delivery Fee"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Build Freeze Updates\n * Inputs: cart rows + guard context\n * Output: one item per cart row with Frozen/Payment fields set.\n */\n\nconst items = $input.all();\nconst rows = [];\nfor (const item of items) {\n  const json = item && item.json ? item.json : {};\n  const rowNum = Number(json.row_number);\n  if (Number.isFinite(rowNum) && rowNum > 0) {\n    rows.push({ ...json, row_number: rowNum });\n  }\n}\n\nif (!rows.length) {\n  return [];\n}\n\nconst now = new Date().toISOString();\n\nreturn rows.map(row => ({\n  json: {\n    row_number: row.row_number,\n    Frozen: 'TRUE',\n    CurrentStep: 'paid',\n    PaymentStatus: 'PAID',\n    UpdatedAt: now,\n  },\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5504,
        3248
      ],
      "id": "3b23c34b-43a3-418d-8d4c-ec959e9cc4a9",
      "name": "Build Freeze Updates"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "row_number": "={{ $json.row_number }}",
            "Frozen": "={{ $json.Frozen }}",
            "CurrentStep": "={{ $json.CurrentStep }}",
            "PaymentStatus": "={{ $json.PaymentStatus }}",
            "UpdatedAt": "={{ $json.UpdatedAt }}"
          },
          "matchingColumns": [
            "row_number"
          ],
          "schema": [
            {
              "id": "Timestamp",
              "displayName": "Timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LineId",
              "displayName": "LineId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "SKU",
              "displayName": "SKU",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Dish",
              "displayName": "Dish",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Price",
              "displayName": "Price",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Quantity",
              "displayName": "Quantity",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LineTotal",
              "displayName": "LineTotal",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "OrderNumber",
              "displayName": "OrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Frozen",
              "displayName": "Frozen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PaymentStatus",
              "displayName": "PaymentStatus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -5072,
        3248
      ],
      "id": "a377a699-2247-4551-a537-1df9ad9868f9",
      "name": "GS: Update Cart Lines",
      "retryOnFail": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "chat_id": "={{ $json.chat_id }}",
            "PaymentStatus": "PAID",
            "CurrentStep": "paid",
            "LastOrderNumber": "={{ $json.ref }}",
            "UpdatedAt": "={{ $now }}",
            "CartFrozen": "TRUE"
          },
          "matchingColumns": [
            "chat_id"
          ],
          "schema": [
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Fulfillment",
              "displayName": "Fulfillment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Zone",
              "displayName": "Zone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "DeliveryFee",
              "displayName": "DeliveryFee",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderNumber",
              "displayName": "LastOrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderUID",
              "displayName": "LastOrderUID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "UpdatedAt",
              "displayName": "UpdatedAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CartFrozen",
              "displayName": "CartFrozen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PaymentStatus",
              "displayName": "PaymentStatus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -4384,
        3920
      ],
      "id": "fd6a6fb3-0b40-40b8-b049-766894a1d75f",
      "name": "GS: Update UserStates (mark paid)",
      "retryOnFail": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "45aa099a-fff5-42d8-80b7-8d3959ff65d7",
              "leftValue": "={{ Number($json.row_number || 0) > 0 }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -5056,
        2272
      ],
      "id": "c7146dd2-c9b3-461e-b5c9-aeb01bdf9af2",
      "name": "IF: Has Order row?"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "row_number": "={{$json.row_number}}",
            "CurrentStep": "paid",
            "PaymentStatus": "PAID"
          },
          "matchingColumns": [
            "row_number"
          ],
          "schema": [
            {
              "id": "Timestamp",
              "displayName": "Timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LineId",
              "displayName": "LineId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "SKU",
              "displayName": "SKU",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Dish",
              "displayName": "Dish",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Price",
              "displayName": "Price",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Quantity",
              "displayName": "Quantity",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LineTotal",
              "displayName": "LineTotal",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "OrderNumber",
              "displayName": "OrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Frozen",
              "displayName": "Frozen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PaymentStatus",
              "displayName": "PaymentStatus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Deleted",
              "displayName": "Deleted",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "OrderUID",
              "displayName": "OrderUID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -4352,
        3696
      ],
      "id": "ec472165-fe3c-41fa-b70e-d8409fd9e2f9",
      "name": "GS: Update Orders (mark paid)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Build Kitchen Message — APPROVE\n// expects from \"Attach Delivery Fee — APPROVE\":\n//   ref, fulfillment, itemLines[], subtotal, deliveryFee, total\nconst md = s => String(s ?? '').replace(/([_*\\[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\nconst KITCHEN_CHAT_ID = -1002927487274;\n\nconst ref          = md(String($json.ref || '—'));\nconst fulfill      = md(String($json.fulfillment || 'delivery'));\nconst items        = Array.isArray($json.itemLines) ? $json.itemLines.map(l => md(String(l))) : [];\nconst subtotal     = Number($json.subtotal || 0);\nconst deliveryFee  = Number($json.deliveryFee || 0);\nconst total        = Number($json.total || (subtotal + deliveryFee));\n\nif (!KITCHEN_CHAT_ID) return [];\n\nconst money = n => `₵${{Number(n || 0).toFixed(2)}}`;\n\nconst lineSep = '__________________________________';\nconst bullet  = items.length\n  ? items.map((l, i) => `${{i + 1}}. ${{l}}`).join('\n')\n  : '—';\n\nconst text = [\n  '✅ *PAID ORDER*',\n  `Ref: *${{ref}}*`,\n  `Fulfillment: *${{fulfill}}*`,\n  '',\n  'Items:',\n  bullet,\n  '',\n  `Subtotal: ${{money(subtotal)}}`,\n  `Delivery fee: ${{money(deliveryFee)}}`,\n  lineSep,\n  `TOTAL: *${{money(total)}}*`,\n  lineSep\n].join('\n');\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id: KITCHEN_CHAT_ID,\n      text,\n      parse_mode: 'Markdown'\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4848,
        3536
      ],
      "id": "b9796f9f-2ed0-419d-a924-7a38b409d391",
      "name": "Build Kitchen Message"
    },
    {
      "parameters": {
        "jsCode": "// Customer Ack (APPROVE path)\n// expects: chat_id, ref, total, fulfillment\nconst md = s => String(s ?? '').replace(/([_*\\[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\n\nconst chatId  = String($json.chat_id || '');\nconst ref     = md(String($json.ref || '—'));\nconst fulfill = md(String($json.fulfillment || 'your order'));\nconst total   = Number($json.total || 0);\n\nif (!chatId) return [];\n\nconst text = [\n  '✅ *Payment received!*',\n  `Ref: *${{ref}}*`,\n  '',\n  `Total paid: *₵${{total.toFixed(2)}}*`,\n  '',\n  `Thanks! We’re preparing for ${{fulfill}}.`,\n  '_Our driver will call you when it’s ready for delivery/pickup._'\n].join('\n');\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id: chatId,\n      text,\n      parse_mode: 'Markdown',\n      reply_markup: {\n        inline_keyboard: [\n          [{ text: '🍽️ Continue shopping', callback_data: 'MENU|REFRESH' }],\n          [{ text: '☎️ Contact support', callback_data: 'HELP|AGENT' }]\n        ]\n      }\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4848,
        3344
      ],
      "id": "458f99c4-b31a-48c8-a1fd-d0e145c54281",
      "name": "Build Customer Ack"
    },
    {
      "parameters": {
        "jsCode": "const md = s => String(s ?? '').replace(/([_*\\[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\nconst ADMIN_CHAT_ID = -1002927487274;\nconst { ref, chat_id, itemLines = [], subtotal = 0, deliveryFee = 0, total = 0, fulfillment = '' } = $json;\n\nconst packed = JSON.stringify({ ref, chat_id });\n\nconst safeRef = md(String(ref || '—'));\nconst safeFulfill = fulfillment ? md(String(fulfillment)) : '';\nconst safeLines = itemLines.map(l => md(String(l)));\n\nconst txt = [\n  '🧾 *Payment review*',\n  `Ref: *${{safeRef}}*`,\n  safeFulfill ? `Fulfillment: *${{safeFulfill}}*` : '',\n  '',\n  'Items:',\n  ...safeLines,\n  '',\n  `Subtotal: *₵${{(+subtotal).toFixed(2)}}*`,\n  deliveryFee > 0 ? `Delivery fee: *₵${{(+deliveryFee).toFixed(2)}}*` : '',\n  '━━━━━━━━━━━━━━━━━━━━',\n  `TOTAL: *₵${{(+total).toFixed(2)}}*`,\n  '━━━━━━━━━━━━━━━━━━━━',\n].filter(Boolean).join('\n');\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id: ADMIN_CHAT_ID,\n      text: txt,\n      parse_mode: 'Markdown',\n      reply_markup: {\n        inline_keyboard: [[\n          { text: '✅ Approve', callback_data: `ADMIN|APPROVE|${{packed}}` },\n          { text: '❌ Reject',  callback_data: `ADMIN|REJECT|${{packed}}` }\n        ]]\n      }\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4608,
        2224
      ],
      "id": "a56993da-37f0-45ab-9465-1b7300133a2e",
      "name": "Build Admin Review Message"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.data }}",
                    "rightValue": "ADMIN|APPROVE",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    },
                    "id": "4d282e37-536b-4c31-8e50-aa5353ca13ef"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "approve"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "c2dbb448-ee59-47a7-b1bd-73ec4fe25eb3",
                    "leftValue": "={{ $json.data }}",
                    "rightValue": "ADMIN|REJECT",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "reject"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -7040,
        3584
      ],
      "id": "e7e879cd-d111-42da-9b5a-50a0c3626275",
      "name": "ADMIN?"
    },
    {
      "parameters": {
        "jsCode": "// Input: callback_data like \"ADMIN|APPROVE|{\"ref\":\"SFK-XXXX\",\"chat_id\":\"5441626742\"}\"\nconst evt = $json;\nconst parts = String(evt.data || '').split('|');\nconst action = parts[1]; // APPROVE or REJECT\nlet packed = {};\ntry { packed = JSON.parse(parts[2] || '{}'); } catch (e) { packed = {}; }\n\nconst user_chat_id  = String(packed.chat_id || '');         // the CUSTOMER we’re acting on\nconst admin_chat_id = String(evt.chat_id || '');             // the admin/channel who tapped\nconst ref           = String(packed.ref || '');\n\nreturn [{\n  json: {\n    action,                  // \"APPROVE\" / \"REJECT\"\n    ref,                     // order reference\n    // IMPORTANT: from here on, chat_id = CUSTOMER (for states/orders/messages to user)\n    chat_id: user_chat_id,\n    user_chat_id,\n    admin_chat_id,           // keep for admin ack if you need it\n    cqid: evt.cqid || evt.callback_query_id || null,\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -6400,
        3168
      ],
      "id": "0582325b-6c67-409b-a1a5-b2680b9783b2",
      "name": "Extract Admin Action"
    },
    {
      "parameters": {
        "jsCode": "const md = s => String(s ?? '').replace(/([_*\\[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\nreturn [{\n  json: {\n    method: 'answerCallbackQuery',\n    payload: { callback_query_id: $json.cqid, text: 'Noted.', show_alert: false }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -6176,
        2960
      ],
      "id": "65fb97e0-dc2f-4d66-a9f2-d277ba2f4a64",
      "name": "Answer Admin Callback"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "chat_id": "={{ $json.chat_id }}",
            "PaymentStatus": "={{ $json.PaymentStatus || 'REJECTED' }}",
            "CurrentStep": "={{ $json.CurrentStep || 'rejected' }}",
            "CartFrozen": "={{ $json.CartFrozen || 'TRUE' }}",
            "LastOrderNumber": "={{ $json.LastOrderNumber || $items('Extract Admin Action(Reject)')[0].json.ref }}",
            "UpdatedAt": "={{ $json.UpdatedAt || $now }}"
          },
          "matchingColumns": [
            "chat_id"
          ],
          "schema": [
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Fulfillment",
              "displayName": "Fulfillment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Zone",
              "displayName": "Zone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "DeliveryFee",
              "displayName": "DeliveryFee",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderNumber",
              "displayName": "LastOrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "LastOrderUID",
              "displayName": "LastOrderUID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "UpdatedAt",
              "displayName": "UpdatedAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CartFrozen",
              "displayName": "CartFrozen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PaymentStatus",
              "displayName": "PaymentStatus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -5296,
        3872
      ],
      "id": "384a3c88-8cd2-49f9-94d3-106f300f29d0",
      "name": "GS: Update UserStates (reject)",
      "retryOnFail": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const md = s => String(s ?? '').replace(/([_*\\[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\nconst ex = $items('Extract Admin Action(Reject)')[0]?.json || {};\nconst chat_id = String($json.chat_id || ex.chat_id || '');\nif (!chat_id) return [];\n\nconst refRaw     = String($json.OrderNumber || $json.ref || ex.ref || '—');\nconst ref        = md(refRaw);\nconst fulfillRaw = String($json.Fulfillment || $json.fulfillment || 'your order');\nconst fulfill    = md(fulfillRaw);\nconst reasonRaw  = String(ex.reject_reason || $json.reject_reason || '').trim();\nconst reason     = reasonRaw ? md(reasonRaw) : '';\n\nconst text = [\n  '❌ *Order not accepted*',\n  `Ref: *${{ref}}*`,\n  '',\n  `We’re unable to proceed with ${{fulfill}} at this time.`,\n  reason ? `Reason: _${{reason}}_` : '',\n  '',\n  'You can try again or contact us below:'\n].filter(Boolean).join('\n');\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id, text, parse_mode: 'Markdown',\n      reply_markup: { inline_keyboard: [\n        [{ text: '🧾 View menu',  callback_data: 'MENU|OPEN' }],\n        [{ text: '🔁 Start over', callback_data: 'RESET|START' }],\n        [{ text: '☎️ Contact support', callback_data: 'HELP|AGENT' }]\n      ] }\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5248,
        4400
      ],
      "id": "911f1da0-ef04-4073-8e17-e16f3d0a7667",
      "name": "Notify Customer (rejected)"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Guard: stop duplicate \"Approve\" runs.\n * Blocks when the last processed order matches this ref\n * and is already paid, rejected, or frozen.\n */\n\nconst ctx = {\n  chat_id: String($json.chat_id || '').trim(),\n  ref: String($json.ref || '').trim(),\n};\n\nconst rows = $input.all().map(i => i.json);\nconst state = rows.find(r => String(r.chat_id || '').trim() === ctx.chat_id) || {};\n\nconst status = String(state.PaymentStatus || '').trim().toUpperCase();\nconst paid = status === 'PAID';\nconst rejected = status === 'REJECTED';\nconst frozen = String(state.CartFrozen || '').trim().toUpperCase() === 'TRUE';\nconst lastRef = String(state.LastOrderNumber || '').trim();\n\nconst isSameOrder = !!(lastRef && ctx.ref && lastRef === ctx.ref);\n\nif (isSameOrder && (paid || rejected || frozen)) {\n  return [];\n}\n\nreturn [{ json: { ...$json } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5728,
        3168
      ],
      "id": "5accfeed-5576-4795-8941-b3f29f40ee84",
      "name": "Guard: Already Paid?"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -5952,
        3248
      ],
      "id": "bf6d9800-1b5f-4be8-b94d-e590e81e4670",
      "name": "GS: Read UserStates (by chat_id)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "OrderNumber",
              "lookupValue": "={{ ($json.ref || '').trim() }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -6176,
        3552
      ],
      "id": "cc543f26-4279-4ef2-ab53-0a3f2d9e96dd",
      "name": "GS: Read Cart (by ref) — APPROVE",
      "retryOnFail": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "chat_id",
              "lookupValue": "={{$json.chat_id}}"
            },
            {
              "lookupColumn": "OrderNumber",
              "lookupValue": "={{$json.ref}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -6176,
        2352
      ],
      "id": "6c00ba95-4b0e-4998-adcc-50d63b175d57",
      "name": "GS: Read Cart (by ref) — REVIEW",
      "retryOnFail": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "/**\n * Drop items whose chat_id looks like a channel/supergroup (-100…)\n * or any non-positive id. Only allow real user ids.\n */\nconst id = String($json.chat_id || '');\nconst isChannelLike = id.startsWith('-100');\nconst isNonPositive  = /^-?\\d+$/.test(id) && Number(id) <= 0;\n\nif (isChannelLike || isNonPositive) {\n  // don't write state for channels/groups\n  return [];\n}\n\n// pass through\nreturn [{ json: $json }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -6176,
        3248
      ],
      "id": "d892c7a3-39b6-45c5-95b0-392687ad70d6",
      "name": "Guard: Skip Channel IDs"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Drop items whose chat_id looks like a channel/supergroup (-100…)\n * or any non-positive id. Only allow real user ids.\n */\nconst id = String($json.chat_id || '');\nconst isChannelLike = id.startsWith('-100');\nconst isNonPositive  = /^-?\\d+$/.test(id) && Number(id) <= 0;\n\nif (isChannelLike || isNonPositive) {\n  // don't write state for channels/groups\n  return [];\n}\n\n// pass through\nreturn [{ json: $json }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4848,
        3920
      ],
      "id": "9dbcecd3-53a5-445b-8126-d32881e9cda0",
      "name": "Guard: Skip Channel IDs1"
    },
    {
      "parameters": {
        "jsCode": "const id = String($json.chat_id || '');\nif (id.startsWith('-100') || (!/^\\d+$/.test(id)) || Number(id) <= 0) return [];\nreturn [{ json: $json }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5952,
        3872
      ],
      "id": "695611ad-c66b-453e-a8b3-b992b50ff1d8",
      "name": "Guard: Skip Channel IDs2"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Drop items whose chat_id looks like a channel/supergroup (-100…)\n * or any non-positive id. Only allow real user ids.\n */\nconst id = String($json.chat_id || '');\nconst isChannelLike = id.startsWith('-100');\nconst isNonPositive  = /^-?\\d+$/.test(id) && Number(id) <= 0;\n\nif (isChannelLike || isNonPositive) {\n  // don't write state for channels/groups\n  return [];\n}\n\n// pass through\nreturn [{ json: $json }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4080,
        1040
      ],
      "id": "9d2e7cb2-c2cc-41cb-a553-a1e133d8a763",
      "name": "Guard: Skip Channel IDs3"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Drop items whose chat_id looks like a channel/supergroup (-100…)\n * or any non-positive id. Only allow real user ids.\n */\nconst id = String($json.chat_id || '');\nconst isChannelLike = id.startsWith('-100');\nconst isNonPositive  = /^-?\\d+$/.test(id) && Number(id) <= 0;\n\nif (isChannelLike || isNonPositive) {\n  // don't write state for channels/groups\n  return [];\n}\n\n// pass through\nreturn [{ json: $json }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4752,
        1040
      ],
      "id": "6bbc46ff-ec5a-493b-a0c1-92457fac727c",
      "name": "Guard: Skip Channel IDs4"
    },
    {
      "parameters": {
        "jsCode": "// APPROVE aggregator – no cross-branch references\nconst ctx = ($items('Extract Admin Action')[0]?.json) || {};\nconst chat_id = String(ctx.chat_id || '');\nconst ref     = String(ctx.ref || '');\n\n// cart rows arrive as $input items\nconst lines = $input.all().map(i => i.json);\n\n// subtotal from LineTotal (fallback to Price*Quantity)\nlet subtotal = 0;\nconst money = n => `¢${Number(n || 0).toFixed(2)}`;\n\nfor (const l of lines) {\n  const lt = Number(l.LineTotal || 0);\n  const p  = Number(l.Price || 0);\n  const q  = Number(l.Quantity || 0);\n  subtotal += lt > 0 ? lt : (p * q);\n}\n\nconst itemLines = lines.map(l => {\n  const qty = Number(l.Quantity || 0);\n  const line = Number(l.LineTotal || (Number(l.Price||0) * qty));\n  return `• ${l.Dish} x${qty} — ${money(line)}`;\n});\n\nreturn [{\n  json: {\n    chat_id, ref, lines, subtotal, itemLines\n    // deliveryFee & total added next node\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5952,
        3632
      ],
      "id": "c59606c7-d77d-4532-9f2c-754ae8f9f8a0",
      "name": "Aggregate Lines & Totals — APPROVE"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -5728,
        3552
      ],
      "id": "bf8dfbe9-9443-44b7-85e6-66816cf0810b",
      "name": "GS: Read Orders (by ref)-Approve",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Attach Delivery Fee — APPROVE (after Merge)\nconst chat_id     = String($json.chat_id || '');\nconst ref         = String($json.ref || '—');\n\nconst subtotal    = Number($json.subtotal || 0);\nconst itemLines   = Array.isArray($json.itemLines) ? $json.itemLines : [];\nconst lines       = Array.isArray($json.lines) ? $json.lines : [];\n\nconst row_number  = Number($json.row_number);                           // <— pass this through\nconst fulfillment = String($json.Fulfillment || $json.fulfillment || '');\nconst deliveryFee = Number(($json.DeliveryFee ?? $json.deliveryFee) || 0);\nconst total       = subtotal + deliveryFee;\n\n// guard: no row_number, don’t proceed (prevents null errors downstream)\nif (!Number.isFinite(row_number) || row_number <= 0) return [];\n\nreturn [{\n  json: { chat_id, ref, row_number, fulfillment, lines, itemLines, subtotal, deliveryFee, total }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5280,
        3632
      ],
      "id": "0c9c4d20-8930-4564-bbd5-9f5eb7deaea7",
      "name": "Attach Delivery Fee — APPROVE"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -5504,
        3632
      ],
      "id": "9c7d8f14-0643-44e4-a8c6-1df578d6dad4",
      "name": "Merge (agg + order)"
    },
    {
      "parameters": {
        "jsCode": "// Build Reject Updates (cart lines) — single output\nconst S = v => (v == null ? '' : String(v));\nconst N = v => Number(v);\nconst isTrue = v => ['true','1','yes'].includes(S(v).trim().toLowerCase());\nconst isPaid = v => S(v).trim().toUpperCase() === 'PAID';\nconst isRejected = v => S(v).trim().toUpperCase() === 'REJECTED';\n\n// Input rows\nconst rows = $input.all()\n  .map(it => it?.json || {})\n  .filter(j => Number.isFinite(N(j.row_number)) && N(j.row_number) > 0)\n  .map(j => ({ ...j, row_number: N(j.row_number) }));\n\n// Context (from Extract Admin Action(Reject))\nconst ctx = ($items('Extract Admin Action(Reject)')?.[0]?.json) || {};\nconst adminChatId = S(ctx.admin_chat_id).trim();\nconst ref = S(ctx.ref).trim();\n\n// Build updates\nconst now = new Date().toISOString();\nconst updates = rows\n  .filter(r => !isPaid(r.PaymentStatus) && !isRejected(r.PaymentStatus) && !isTrue(r.Frozen))\n  .map(r => ({\n    json: {\n      __target: 'sheets',\n      row_number: r.row_number,\n      Frozen: 'TRUE',\n      CurrentStep: 'rejected',\n      PaymentStatus: 'REJECTED',\n      UpdatedAt: now,\n    }\n  }));\n\n// Optional admin notice if nothing to update\nif (adminChatId && updates.length === 0) {\n  updates.push({\n    json: {\n      __target: 'telegram',\n      method: 'sendMessage',\n      payload: {\n        chat_id: adminChatId,\n        text: [\n          '⚠️ *Nothing to update*',\n          ref ? `Ref: *${ref}*` : '',\n          '',\n          rows.length === 0\n            ? 'No cart lines found for this reference.'\n            : 'All lines are already handled (paid, rejected or frozen).',\n        ].filter(Boolean).join('\\n'),\n        parse_mode: 'Markdown',\n      }\n    }\n  });\n}\n\nreturn updates;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -6192,
        4416
      ],
      "id": "94e8fe65-4143-49b0-b3e8-13151cb6fc29",
      "name": "Build Reject Updates (cart lines)"
    },
    {
      "parameters": {
        "jsCode": "// Build UserState Reject Update (robust)\nconst refFromExtract = $items('Extract Admin Action(Reject)')[0]?.json?.ref || '';\nreturn [{\n  json: {\n    chat_id: $json.chat_id,\n    CurrentStep: 'rejected',\n    PaymentStatus: 'REJECTED',\n    LastOrderNumber: refFromExtract,\n    CartFrozen: 'TRUE',\n    UpdatedAt: new Date().toISOString(),\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5728,
        3872
      ],
      "id": "fa126e15-54d8-49bb-b67f-1c89ff3e5187",
      "name": "Build UserState Reject Update"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "OrderNumber",
              "lookupValue": "={{$items('Extract Admin Action(Reject)')[0].json.ref.trim()}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -6400,
        4416
      ],
      "id": "699443a7-6f5f-4058-b438-a0530aa4f8ea",
      "name": "GS: Read Cart (by ref) — REJECT",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -6176,
        3872
      ],
      "id": "05257416-d158-49df-b853-4084dc269316",
      "name": "GS: Read UserStates (by chat_id)2",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "row_number": "={{ $json.row_number }}",
            "Frozen": "={{ $json.Frozen }}",
            "CurrentStep": "={{ $json.CurrentStep }}",
            "PaymentStatus": "={{ $json.PaymentStatus }}",
            "UpdatedAt": "={{ $json.UpdatedAt }}"
          },
          "matchingColumns": [
            "row_number"
          ],
          "schema": [
            {
              "id": "Timestamp",
              "displayName": "Timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LineId",
              "displayName": "LineId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "SKU",
              "displayName": "SKU",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Dish",
              "displayName": "Dish",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Price",
              "displayName": "Price",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Quantity",
              "displayName": "Quantity",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LineTotal",
              "displayName": "LineTotal",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "OrderNumber",
              "displayName": "OrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Frozen",
              "displayName": "Frozen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PaymentStatus",
              "displayName": "PaymentStatus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -5520,
        4272
      ],
      "id": "9dc140c1-fd01-4ddf-9996-5c8e57ac5151",
      "name": "GS: Update Cart Lines1",
      "retryOnFail": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract Admin Action (REJECT-only)\nconst raw = String($json.data || $json.callback_data || '').trim();\nconst parts = raw.split('|');            // ADMIN|REJECT|{...}\nconst action = (parts[1] || '').toUpperCase();\nif (action !== 'REJECT') return [];      // <— ignore non-reject taps\n\nlet packed = {};\ntry { packed = JSON.parse(parts[2] || '{}'); } catch {}\n\nconst user_chat_id  = String(packed.chat_id || '');\nconst admin_chat_id = String($json.chat_id || $json.message?.chat?.id || '');\nconst message_id    = String($json.message_id || $json.message?.message_id || '');\nconst cqid          = $json.cqid || $json.callback_query_id || $json.callback_query?.id || null;\n\nreturn [{\n  json: {\n    action,\n    ref: String(packed.ref || packed.OrderNumber || ''),\n    chat_id: user_chat_id,          // <- customer\n    user_chat_id,\n    admin_chat_id,\n    message_id,\n    cqid,\n    reject_reason: packed.reason || '' // if you include a reason in the payload\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -6400,
        4064
      ],
      "id": "de898b9e-aab3-452b-83bf-aa86b031bdcc",
      "name": "Extract Admin Action(Reject)"
    },
    {
      "parameters": {
        "resource": "callback",
        "queryId": "={{$json.cqid || $json.callback_query_id || $json.callback_query?.id}}\n",
        "additionalFields": {
          "text": "=Rejected: {{$items('Extract Admin Action(Reject)')[0].json.ref}}"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -5952,
        4064
      ],
      "id": "a541aebc-7e7b-4271-adff-38e0d37f4a85",
      "name": "Answer Admin Callback (spinner off)",
      "webhookId": "9051357e-f8e4-4810-b4f8-b655d032f66a",
      "credentials": {
        "telegramApi": {
          "id": "GWiNIWfCwEPeHIOg",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Guard: Already Reviewed?\n// Read UserStates (by chat_id) or Cart (by ref) before this guard\nconst status = ($json.PaymentStatus || '').toUpperCase(); // from state or a prior read\nif (status === 'PAID' || status === 'REJECTED') return []; // drop duplicate taps\nreturn [{ json: $json }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -6176,
        4064
      ],
      "id": "af32f8cb-724a-4a57-b5c4-909eb18e49c7",
      "name": "Guard: Already Reviewed?"
    },
    {
      "parameters": {
        "jsCode": "// Reply: Contact Support\nconst md = s => String(s ?? '').replace(/([_*\\[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\nconst chat_id = $json.chat_id;\n\nconst text = [\n  '☎️ *Contact support*',\n  'Our driver or team will call you when your order is ready.',\n  '',\n  'If it’s urgent, call: *0243 957 386*',\n  ].join('\n');\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id,\n      text,\n      parse_mode: 'Markdown'\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1456,
        4736
      ],
      "id": "76335c32-265d-49f2-bfb4-990156931d56",
      "name": "Reply: Contact Support"
    },
    {
      "parameters": {
        "jsCode": "// Set Pickup Context\n// Input: must contain chat_id (from Parse Callback -> Action Router -> this node)\n// Output: one item with fields to write into UserStates\nconst chat_id = String($json.chat_id || '');\nif (!chat_id) return []; // safety\n\nreturn [{\n  json: {\n    chat_id,\n    Fulfillment: 'pickup',\n    CurrentStep: 'await_phone',\n    // clear delivery-only fields\n    Address: '',\n    Zone: '',\n    DeliveryFee: '',\n    PaymentStatus: '',   // don't force to PAID/REJECTED here\n    CartFrozen: 'FALSE',\n    UpdatedAt: $now\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -928,
        4480
      ],
      "id": "3674ec26-1490-49b4-9fe8-b3e01f7bbe22",
      "name": "Set Pickup Context"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "chat_id": "={{$json.chat_id}}",
            "Fulfillment": "={{ $json.Fulfillment ?? 'pickup' }}",
            "CurrentStep": "={{$json.CurrentStep}}",
            "Address": "={{ $json.Address ?? '' }}",
            "Zone": "={{ $json.Zone ?? '' }}",
            "DeliveryFee": "={{ $json.DeliveryFee ?? '' }}",
            "PaymentStatus": "={{ $json.PaymentStatus ?? '' }}",
            "CartFrozen": "={{ $json.CartFrozen ?? 'FALSE' }}",
            "UpdatedAt": "={{$now}}"
          },
          "matchingColumns": [
            "chat_id"
          ],
          "schema": [
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Fulfillment",
              "displayName": "Fulfillment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Zone",
              "displayName": "Zone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "DeliveryFee",
              "displayName": "DeliveryFee",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderNumber",
              "displayName": "LastOrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderUID",
              "displayName": "LastOrderUID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "UpdatedAt",
              "displayName": "UpdatedAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CartFrozen",
              "displayName": "CartFrozen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "PaymentStatus",
              "displayName": "PaymentStatus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -240,
        4368
      ],
      "id": "cf987418-88e4-4d58-856f-3e2e48fd5c3d",
      "name": "GS: Update UserStates (pickup)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "44302742-74f7-4a7b-b04a-d9a9069518b6",
              "leftValue": "={{$json.Fulfillment}}",
              "rightValue": "delivery",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -432,
        80
      ],
      "id": "38c0f04f-e349-435e-845d-0ab87d049c71",
      "name": "IF: Fulfillment is delivery?"
    },
    {
      "parameters": {
        "jsCode": "// Reply: Pickup → Ask Phone\nconst md = s => String(s ?? '').replace(/([_*\\[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\nconst chat_id = $json.chat_id;\n\nconst text = [\n  '🏪 *Pickup selected.*',\n  'Please reply with your *phone number* (e.g., `0241234567` or `+233241234567`).'\n].join('\n');\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id,\n      text,\n      parse_mode: 'Markdown',\n      reply_markup: {\n        inline_keyboard: [\n          [{ text: 'Change to Delivery', callback_data: 'FULFILL|DELIVERY' }]\n        ]\n      }\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -288,
        4576
      ],
      "id": "980ab6a2-b600-4dfa-bfae-98bee96c514d",
      "name": "Reply: Pickup → Ask Phone"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        848,
        368
      ],
      "id": "36a26a8b-a00e-4861-acc6-818aa085d840",
      "name": "GS: Read State (summary)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "/**\n * Attach State → Lines (checkout) — robust chat_id + frozen filter\n * Joins the single UserStates row onto each cart line so the summary can\n * see Fulfillment / Address / DeliveryFee / Phone.\n *\n * Inputs (by name – but we also fall back to $input when run alone):\n *   - GS: Read Cart (checkout)   → cart lines\n *   - GS: Read State (summary)   → all UserStates rows\n */\n\nfunction fromNode(name) {\n  try { return $items(name).map(i => i.json); }\n  catch (_) { return []; }\n}\n\n// 1) Collect inputs\nlet cartAll   = fromNode('GS: Read Cart (checkout)');\nlet statesAll = fromNode('GS: Read State (summary)');\n\n// Fallback when executing this node alone\nif (cartAll.length === 0 || statesAll.length === 0) {\n  const ins = $input.all().map(i => i.json);\n  if (cartAll.length === 0) {\n    cartAll = ins.filter(r => r && (r.SKU || r.sku || r.Dish));\n  }\n  if (statesAll.length === 0) {\n    statesAll = ins.filter(r =>\n      r && (\n        r.chat_id !== undefined || r.ChatID !== undefined ||\n        r.Fulfillment !== undefined || r.CurrentStep !== undefined ||\n        r.Address !== undefined || r.Zone !== undefined ||\n        r.DeliveryFee !== undefined || r.Phone !== undefined\n      )\n    );\n  }\n}\n\n// 2) Drop frozen lines first\nconst isFrozen = v => {\n  const t = String(v ?? '').trim().toLowerCase();\n  return t === 'true' || t === '1' || t === 'yes';\n};\nconst cart = cartAll.filter(r => !isFrozen(r.Frozen));\n\n// 3) Resolve chat_id AFTER filtering (and with fallbacks)\nconst chatIdCandidates = [\n  ...cart.map(r => r?.chat_id ?? r?.ChatID),\n  ...statesAll.map(s => s?.chat_id ?? s?.ChatID),\n  $json._chat_id, $json.chat_id\n].map(v => (v == null ? '' : String(v))).filter(v => v && v !== 'empty');\n\nconst chatId = chatIdCandidates[0] || '';\n\n// 4) Pick this user's state row (or default)\nconst state = statesAll.find(s => String(s?.chat_id ?? s?.ChatID) === chatId) || {};\nconst s = {\n  chat_id: chatId,\n  Fulfillment: String(state.Fulfillment || '').toLowerCase(),\n  Address: state.Address || '',\n  Zone: state.Zone || '',\n  DeliveryFee: Number(state.DeliveryFee || 0) || 0,\n  Phone: state.Phone || ''\n};\n\n// 5) Emit one item per active cart line with state attached\nconst out = cart.map(r => ({ json: { ...r, ...s } }));\nreturn out.length ? out : [];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1088,
        496
      ],
      "id": "2d214843-55eb-4a26-a3e1-9fb35cfef62c",
      "name": "Attach State → Lines (checkout)"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Fulfillment": "={{$json.Fulfillment}}",
            "chat_id": "={{$json.chat_id}}",
            "CurrentStep": "={{$json.CurrentStep}}",
            "Address": "={{ $json.Address ?? '' }}",
            "Zone": "={{ $json.Zone ?? '' }}",
            "DeliveryFee": "={{ $json.DeliveryFee ?? '' }}",
            "UpdatedAt": "={{$now}}",
            "CartFrozen": "={{ $json.CartFrozen ?? 'FALSE' }}",
            "PaymentStatus": "={{ $json.PaymentStatus ?? '' }}"
          },
          "matchingColumns": [
            "chat_id"
          ],
          "schema": [
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Fulfillment",
              "displayName": "Fulfillment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Zone",
              "displayName": "Zone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "DeliveryFee",
              "displayName": "DeliveryFee",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderNumber",
              "displayName": "LastOrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderUID",
              "displayName": "LastOrderUID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "UpdatedAt",
              "displayName": "UpdatedAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CartFrozen",
              "displayName": "CartFrozen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "PaymentStatus",
              "displayName": "PaymentStatus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -416,
        4352
      ],
      "id": "00daa6ee-d589-4f88-aaf8-baee6cf27937",
      "name": "Append or update row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "45214722-c7c0-43a3-8eaa-7acdf8dff641",
              "leftValue": "={{ Array.isArray($json.lines) && $json.lines.length > 0 }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -5504,
        2352
      ],
      "id": "e1a3c48a-9f61-4ff7-9cb0-55066f462be2",
      "name": "If: any lines?"
    },
    {
      "parameters": {
        "jsCode": "const price = Number($json.Price || 0);\nconst current = Number($json.Quantity || 0);\nconst qty = current + 1;\n\nreturn [{\n  json: {\n    ...$json,\n    Quantity: qty,\n    LineTotal: qty * price\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -128,
        1216
      ],
      "id": "0f262942-08ee-4453-b50e-dfe7cbeda311",
      "name": "Bump Qty"
    },
    {
      "parameters": {
        "jsCode": "const frozen = String($json.Frozen ?? '').toLowerCase() === 'true';\nconst paid   = String($json.PaymentStatus ?? '').toUpperCase() === 'PAID';\nconst hasOrderNo = String($json.OrderNumber ?? '').trim() !== '';\n\n/**\n * Drop the item if it's a paid/frozen line or already has an order number.\n * Returning [] in n8n means “don’t pass this item forward”.\n */\nif (frozen || paid || hasOrderNo) {\n  return [];\n}\nreturn [$json];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1024,
        1536
      ],
      "id": "38548abf-8feb-4c14-9f99-b090732cf208",
      "name": "guard IF – invalid syntax"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ba06264c-97cd-4f9f-b9f7-2f05d04b6a95",
              "leftValue": "={{$json.CurrentStep}}",
              "rightValue": "await_addr",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1680,
        384
      ],
      "id": "5d8749e4-cb68-4d43-a73d-5acbe5a84f8d",
      "name": "IF: Awaiting ADDRESS",
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "28b78a75-a587-4c8a-ad9c-de5933815c88",
              "leftValue": "={{$json.CurrentStep}}",
              "rightValue": "await_phone",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1904,
        368
      ],
      "id": "ff271d47-6957-4461-9908-3b12edfe5b5c",
      "name": "IF: Awaiting PHONE"
    },
    {
      "parameters": {
        "jsCode": "// Cart lines from the combine gate\nconst cartItems = $input.all();\n\n// Meta from Ensure Order Number (now guaranteed executed)\nlet meta = {};\ntry { meta = ($items('Ensure Order Number')[0]?.json) || {}; }\ncatch { meta = ($node['Ensure Order Number']?.json) || {}; }\n\nconst out = cartItems.map(i => {\n  const j = { ...i.json };\n  if (meta.OrderNumber) j.OrderNumber = meta.OrderNumber;\n  if (meta.OrderUID)    j.OrderUID    = meta.OrderUID;\n  if (meta.Zone !== undefined)        j.Zone        = meta.Zone;\n  if (meta.DeliveryFee !== undefined) j.DeliveryFee = Number(meta.DeliveryFee);\n  return { json: j };\n});\n\nreturn out; // array\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -224,
        3824
      ],
      "id": "d5e35353-eb5c-4600-b8b6-8ca480198bf8",
      "name": "Join: Cart + OrderNo1"
    },
    {
      "parameters": {
        "jsCode": "// Fan-out each order line that is not already PAID.\n// Input: one aggregated item with { lines: [...] }.\nconst all = $input.all();\nif (!all.length) return [];\n\nconst agg = (all[0].json || {});\nconst lines = Array.isArray(agg.lines) ? agg.lines : [];\n\n// Idempotency: skip rows already marked PAID\nconst toUpdate = lines.filter(l =>\n  String(l.PaymentStatus || '').toUpperCase() !== 'PAID'\n);\n\n// Emit one minimal item per line for the Sheets update\nreturn toUpdate.map(l => ({\n  json: {\n    row_number: Number(l.row_number),\n    CurrentStep: 'paid',\n    PaymentStatus: 'PAID',\n  },\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4848,
        3696
      ],
      "id": "f557d3f4-76e7-40cc-9502-7b99d62c2a0a",
      "name": "Prepare Line Updates (approve)"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "562fcb62-1bcf-4c85-9e10-caf502ece7c2",
              "leftValue": "={{ $items(\"Build Reject Updates (cart lines)\").length > 0 }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -6016,
        4336
      ],
      "id": "559f4e06-b5c2-43b2-a4c7-481aa097868c",
      "name": "IF: Has Rejectable Lines?"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "63d56fc1-f481-4999-b89f-af1ef4207e6e",
              "leftValue": "={{\n  ($json.is_callback !== true) &&\n  /^\\/?(start|menu|hi|hello)$/i.test(($json.text || '').trim())\n    ? true\n    : false\n}}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3968,
        1552
      ],
      "id": "2e87e5a9-bd36-4d6b-8c98-f5a98cb9b596",
      "name": "IF: Is Greeting?"
    },
    {
      "parameters": {
        "jsCode": "const md = s => String(s ?? '').replace(/([_*\\[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\nconst brand = md($env.BRAND_NAME || 'Sefake Kitchen');\nconst momoRaw  = $env.MOMO_NUMBER || '';\nconst momo  = momoRaw ? md(momoRaw) : '';\n\nconst lines = [\n  `👋 Welcome to *${{brand}}*!`,\n  `Order delicious meals via Telegram.`,\n  ``,\n  `• Tap *Menu* to start an order`,\n  `• Already have a cart? Tap *Checkout*`,\n  ...(momo ? [`• MoMo: ${{momo}}`] : []),\n];\n\nconst text = lines.join('\n');\nconst out = [];\n\nfor (const it of $input.all()) {\n  const j = it.json || {};\n  const chat_id = j.chat_id;\n\n  const reply_markup = {\n    inline_keyboard: [\n      [{ text: '📖 Menu',     callback_data: 'MENU|OPEN' }],\n      [{ text: '🧾 Checkout', callback_data: 'CART|CHECKOUT' }]\n    ]\n  };\n\n  out.push({\n    json: {\n      method: 'sendMessage',\n      payload: {\n        chat_id,\n        text,\n        parse_mode: 'Markdown',\n        disable_web_page_preview: true,\n        reply_markup\n      }\n    }\n  });\n}\n\nreturn out;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3456,
        1488
      ],
      "id": "006b1534-7a2f-47d9-a3de-60c5c67c418e",
      "name": "Build Greeting"
    },
    {
      "parameters": {
        "jsCode": "// ====== Config via env (safe defaults) ======\nconst OPEN_HHMM  = $env.OPEN_HHMM   || '09:00';                 // 24h\nconst CLOSE_HHMM = $env.CLOSE_HHMM  || '21:00';\nconst OPEN_DAYS  = ($env.OPEN_DAYS  || 'Mon,Tue,Wed,Thu,Fri,Sat')\n  .split(',')\n  .map(s => s.trim().toLowerCase());                            // ['mon', ...]\nconst TZ         = $env.TIMEZONE    || 'Africa/Accra';\nconst HOLIDAYS   = ($env.HOLIDAYS   || '')                      // '2025-12-25,2025-12-26'\n  .split(',')\n  .map(s => s.trim())\n  .filter(Boolean);\n\n// ====== Helpers ======\nfunction inWindow(now, open, close) {\n  // open/close format 'HH:MM'\n  const [oh, om] = open.split(':').map(Number);\n  const [ch, cm] = close.split(':').map(Number);\n  const start = new Date(now); start.setHours(oh, om, 0, 0);\n  const end   = new Date(now); end.setHours(ch, cm, 0, 0);\n\n  // overnight window (e.g., 18:00–02:00):\n  if (end <= start) return (now >= start) || (now <= end);\n  return (now >= start) && (now <= end);\n}\n\nconst ev = $input.first()?.json ?? {};\n// current time in business TZ\nconst now = new Date(new Date().toLocaleString('en-US', { timeZone: TZ }));\nconst dayKey = now.toLocaleDateString('en-US', { weekday: 'short' }).slice(0,3).toLowerCase(); // 'mon'\nconst isHoliday  = HOLIDAYS.includes(now.toISOString().slice(0,10));\nconst isOpenDay  = OPEN_DAYS.includes(dayKey);\nconst withinTime = inWindow(now, OPEN_HHMM, CLOSE_HHMM);\n\nconst is_open = isOpenDay && withinTime && !isHoliday;\n\n// Return an item (array-of-items with a json object)\nreturn [{\n  json: {\n    ...ev,                 // keep incoming chat_id, etc.\n    is_open,\n    tz: TZ,\n    now_iso: now.toISOString(),\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4496,
        1824
      ],
      "id": "fd7d9b26-ee80-4bdd-898e-ab0fc536e4d3",
      "name": "Guard: Kitchen Open?"
    },
    {
      "parameters": {
        "jsCode": "// Closed message (shows hours + days)\nconst md = s => String(s ?? '').replace(/([_*\\[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\nconst brand = md($env.BRAND_NAME || 'Sefake Kitchen');\nconst OPEN  = md($env.OPEN_HHMM  || '09:00');\nconst CLOSE = md($env.CLOSE_HHMM || '20:00');\nconst DAYS  = md(($env.OPEN_DAYS || 'Mon,Tue,Wed,Thu,Fri,Sat').split(',').map(s => s.trim()).join(', '));\n\nconst lines = [\n  `⏳ *${{brand}}* is currently *closed*.`,\n  `🕒 *Hours:* ${{OPEN}}–${{CLOSE}}`,\n  `📅 *Days:* ${{DAYS}}`,\n  '',\n  `You can still browse the menu. If you’ve already paid, tap *I have paid* in your earlier message.`,\n];\n\nconst text = lines.join('\n');\n\nconst reply_markup = {\n  inline_keyboard: [\n    [{ text: '📖 View menu',     callback_data: 'MENU|OPEN' }],\n    [{ text: '🧾 Go to checkout', callback_data: 'CART|CHECKOUT' }],\n  ]\n};\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id: $json.chat_id,\n      text,\n      parse_mode: 'Markdown',\n      reply_markup,\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3920,
        1904
      ],
      "id": "f742283e-e13e-41c9-b0c3-4443f745beda",
      "name": "Build Closed Message"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "64d9e91a-63c8-45a3-95f9-6e9c199ae228",
              "leftValue": "={{ $json.is_open === true }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -4224,
        1840
      ],
      "id": "12c53b56-6f9a-47cc-a518-9a3e550b1b58",
      "name": "IF: Kitchen is open?"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Ensure Cart Rows (approve) — single-output\n * IN: items from \"GS: Read Cart (by ref) — APPROVE\"\n * OUT: \n *  - if rows exist -> each row wrapped as { json: {...} }\n *  - if none      -> ONE control item { json: { _notify_admin: true, ref, text } }\n */\nfunction n(v){const x=Number(v);return Number.isFinite(x)?x:NaN;}\n\nconst rows = $input.all()\n  .map(i => (i && i.json) ? i.json : {})\n  .filter(r => Number.isFinite(n(r.row_number)) && n(r.row_number) > 0);\n\n// Best-effort ref for message (from input rows)\nconst ref = String(rows[0]?.OrderNumber || '').trim();\n\nif (rows.length === 0) {\n  return [{\n    json: {\n      _notify_admin: true,\n      ref,\n      text: ref \n        ? `⚠️ No cart lines found for ref ${ref}. Nothing to approve.`\n        : `⚠️ No cart lines found. Nothing to approve.`,\n    }\n  }];\n}\n\n// pass-through: one item PER cart row, correctly wrapped\nreturn rows.map(r => ({ json: r }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5952,
        3392
      ],
      "id": "78d4d61e-c1cd-443c-b928-a06f6c63a3ba",
      "name": "Ensure Cart Rows (approve)"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ ($env.TG_API_BASE || 'https://api.telegram.org') }}/bot{{$env.TG_BOT_TOKEN}}/{{ $json._endpoint || $json.method || 'sendMessage' }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json.payload) }}",
        "options": {
          "maxRetries": 0
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1008,
        2192
      ],
      "id": "c6f9a848-772d-4bf9-8631-5d3c406e438d",
      "name": "HTTP Request (details)"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ ($env.TG_API_BASE || 'https://api.telegram.org') }}/bot{{$env.TG_BOT_TOKEN}}/{{ $json._endpoint || $json.method || 'sendMessage' }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.payload ?? $json }}",
        "options": {
          "maxRetries": 0
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -5936,
        2960
      ],
      "id": "c8830e36-b02f-44dd-abc8-7ee9d3d0fe83",
      "name": "HTTP: Telegram Send"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        320,
        2608
      ],
      "id": "26be58ac-0464-4508-b8a1-8f03263da907",
      "name": "Merge: State ──→ Needs Phone?"
    },
    {
      "parameters": {
        "jsCode": "const raw = String($json.phone || $json.Phone || '').trim();\nconst digits = raw.replace(/\\D/g,'');\nconst hasPhone = digits.length >= 9; // Ghana min length check\nreturn hasPhone ? [] : [$json];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        528,
        2608
      ],
      "id": "19da1d98-6779-463e-8099-f41da41dd968",
      "name": "Needs Phone? (Code)"
    },
    {
      "parameters": {
        "jsCode": "const prev = String($json._prevStep || '');\nconst cur  = String($json.CurrentStep || '');\nif (cur === 'await_phone' && prev !== 'await_phone') return [$json];\nreturn [];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        736,
        2608
      ],
      "id": "7a4e24c8-bccb-4ec2-bc81-5b71764f55cb",
      "name": "Guard: AskPhone once"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Menu",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=0"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "SKU",
              "lookupValue": "={{ $json.sku || $json.SKU }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1600,
        2160
      ],
      "id": "3f2fb7ab-e8ff-4bb2-80f0-186631d53ff7",
      "name": "GS: Read Menu (by SKU)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Auto-switch to edit endpoints on callbacks (no duplicate messages)\nconst isCb = $json.is_callback === true;\nconst mid  = $json.message_id;\nconst chat = $json.chat_id;\nconst p    = $json.payload || {};\nconst endpoint = ($json._endpoint || $json.method || '').toString();\n\nfunction safeStr(v, fallback=' ') {\n  const s = (v ?? '').toString();\n  return s.length ? s : fallback; // Telegram hates empty strings\n}\n\nconst out = { ...$json }; // preserve anything you already set\n\nif (isCb && mid && chat) {\n  // If the original builder wanted to send a photo (with caption),\n  // prefer editing the caption. (If you need to change the image itself,\n  // you’d use editMessageMedia, but caption/buttons is enough here.)\n  const isPhoto = endpoint === 'sendPhoto' || typeof p.photo === 'string';\n\n  if (isPhoto) {\n    out._endpoint = 'editMessageCaption';\n    out.payload = {\n      chat_id: chat,\n      message_id: mid,\n      caption: safeStr(p.caption),\n      parse_mode: p.parse_mode || 'Markdown',\n      reply_markup: p.reply_markup\n    };\n  } else {\n    out._endpoint = 'editMessageText';\n    out.payload = {\n      chat_id: chat,\n      message_id: mid,\n      text: safeStr(p.text),\n      parse_mode: p.parse_mode || 'Markdown',\n      reply_markup: p.reply_markup,\n      disable_web_page_preview: true\n    };\n  }\n} else {\n  // Non-callback: keep whatever the builder set, but normalise field name\n  out._endpoint = endpoint || (p.photo ? 'sendPhoto' : 'sendMessage');\n}\n\nreturn [{ json: out }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -880,
        992
      ],
      "id": "35efe23d-1405-4744-b991-612884bafa0c",
      "name": "TG: Send or Edit"
    },
    {
      "parameters": {
        "jsCode": "// Auto-switch to edit endpoints on callbacks (no duplicate messages)\nconst isCb = $json.is_callback === true;\nconst mid  = $json.message_id;\nconst chat = $json.chat_id;\nconst p    = $json.payload || {};\nconst endpoint = ($json._endpoint || $json.method || '').toString();\n\nfunction safeStr(v, fallback=' ') {\n  const s = (v ?? '').toString();\n  return s.length ? s : fallback; // Telegram hates empty strings\n}\n\nconst out = { ...$json }; // preserve anything you already set\n\nif (isCb && mid && chat) {\n  // If the original builder wanted to send a photo (with caption),\n  // prefer editing the caption. (If you need to change the image itself,\n  // you’d use editMessageMedia, but caption/buttons is enough here.)\n  const isPhoto = endpoint === 'sendPhoto' || typeof p.photo === 'string';\n\n  if (isPhoto) {\n    out._endpoint = 'editMessageCaption';\n    out.payload = {\n      chat_id: chat,\n      message_id: mid,\n      caption: safeStr(p.caption),\n      parse_mode: p.parse_mode || 'Markdown',\n      reply_markup: p.reply_markup\n    };\n  } else {\n    out._endpoint = 'editMessageText';\n    out.payload = {\n      chat_id: chat,\n      message_id: mid,\n      text: safeStr(p.text),\n      parse_mode: p.parse_mode || 'Markdown',\n      reply_markup: p.reply_markup,\n      disable_web_page_preview: true\n    };\n  }\n} else {\n  // Non-callback: keep whatever the builder set, but normalise field name\n  out._endpoint = endpoint || (p.photo ? 'sendPhoto' : 'sendMessage');\n}\n\nreturn [{ json: out }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1424,
        2176
      ],
      "id": "d6542533-5cf8-4a66-a10e-a6b61159d7f5",
      "name": "TG: Send or Edit1"
    },
    {
      "parameters": {
        "jsCode": "// Auto-switch to edit endpoints on callbacks (no duplicate messages)\nconst isCb = $json.is_callback === true;\nconst mid  = $json.message_id;\nconst chat = $json.chat_id;\nconst p    = $json.payload || {};\nconst endpoint = ($json._endpoint || $json.method || '').toString();\n\nfunction safeStr(v, fallback=' ') {\n  const s = (v ?? '').toString();\n  return s.length ? s : fallback; // Telegram hates empty strings\n}\n\nconst out = { ...$json }; // preserve anything you already set\n\nif (isCb && mid && chat) {\n  // If the original builder wanted to send a photo (with caption),\n  // prefer editing the caption. (If you need to change the image itself,\n  // you’d use editMessageMedia, but caption/buttons is enough here.)\n  const isPhoto = endpoint === 'sendPhoto' || typeof p.photo === 'string';\n\n  if (isPhoto) {\n    out._endpoint = 'editMessageCaption';\n    out.payload = {\n      chat_id: chat,\n      message_id: mid,\n      caption: safeStr(p.caption),\n      parse_mode: p.parse_mode || 'Markdown',\n      reply_markup: p.reply_markup\n    };\n  } else {\n    out._endpoint = 'editMessageText';\n    out.payload = {\n      chat_id: chat,\n      message_id: mid,\n      text: safeStr(p.text),\n      parse_mode: p.parse_mode || 'Markdown',\n      reply_markup: p.reply_markup,\n      disable_web_page_preview: true\n    };\n  }\n} else {\n  // Non-callback: keep whatever the builder set, but normalise field name\n  out._endpoint = endpoint || (p.photo ? 'sendPhoto' : 'sendMessage');\n}\n\nreturn [{ json: out }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1056,
        1792
      ],
      "id": "f6c138c9-2aa9-455c-85fd-a0126bae65a6",
      "name": "TG: Send or Edit2"
    },
    {
      "parameters": {
        "jsCode": "// Auto-switch to edit endpoints on callbacks (no duplicate messages)\nconst isCb = $json.is_callback === true;\nconst mid  = $json.message_id;\nconst chat = $json.chat_id;\nconst p    = $json.payload || {};\nconst endpoint = ($json._endpoint || $json.method || '').toString();\n\nfunction safeStr(v, fallback=' ') {\n  const s = (v ?? '').toString();\n  return s.length ? s : fallback; // Telegram hates empty strings\n}\n\nconst out = { ...$json }; // preserve anything you already set\n\nif (isCb && mid && chat) {\n  // If the original builder wanted to send a photo (with caption),\n  // prefer editing the caption. (If you need to change the image itself,\n  // you’d use editMessageMedia, but caption/buttons is enough here.)\n  const isPhoto = endpoint === 'sendPhoto' || typeof p.photo === 'string';\n\n  if (isPhoto) {\n    out._endpoint = 'editMessageCaption';\n    out.payload = {\n      chat_id: chat,\n      message_id: mid,\n      caption: safeStr(p.caption),\n      parse_mode: p.parse_mode || 'Markdown',\n      reply_markup: p.reply_markup\n    };\n  } else {\n    out._endpoint = 'editMessageText';\n    out.payload = {\n      chat_id: chat,\n      message_id: mid,\n      text: safeStr(p.text),\n      parse_mode: p.parse_mode || 'Markdown',\n      reply_markup: p.reply_markup,\n      disable_web_page_preview: true\n    };\n  }\n} else {\n  // Non-callback: keep whatever the builder set, but normalise field name\n  out._endpoint = endpoint || (p.photo ? 'sendPhoto' : 'sendMessage');\n}\n\nreturn [{ json: out }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1472,
        544
      ],
      "id": "ea3298ed-3992-459c-8a44-97dd5c1c9b0c",
      "name": "TG: Send or Edit3"
    },
    {
      "parameters": {
        "jsCode": "// Auto-switch to edit endpoints on callbacks (no duplicate messages)\nconst isCb = $json.is_callback === true;\nconst mid  = $json.message_id;\nconst chat = $json.chat_id;\nconst p    = $json.payload || {};\nconst endpoint = ($json._endpoint || $json.method || '').toString();\n\nfunction safeStr(v, fallback=' ') {\n  const s = (v ?? '').toString();\n  return s.length ? s : fallback; // Telegram hates empty strings\n}\n\nconst out = { ...$json }; // preserve anything you already set\n\nif (isCb && mid && chat) {\n  // If the original builder wanted to send a photo (with caption),\n  // prefer editing the caption. (If you need to change the image itself,\n  // you’d use editMessageMedia, but caption/buttons is enough here.)\n  const isPhoto = endpoint === 'sendPhoto' || typeof p.photo === 'string';\n\n  if (isPhoto) {\n    out._endpoint = 'editMessageCaption';\n    out.payload = {\n      chat_id: chat,\n      message_id: mid,\n      caption: safeStr(p.caption),\n      parse_mode: p.parse_mode || 'Markdown',\n      reply_markup: p.reply_markup\n    };\n  } else {\n    out._endpoint = 'editMessageText';\n    out.payload = {\n      chat_id: chat,\n      message_id: mid,\n      text: safeStr(p.text),\n      parse_mode: p.parse_mode || 'Markdown',\n      reply_markup: p.reply_markup,\n      disable_web_page_preview: true\n    };\n  }\n} else {\n  // Non-callback: keep whatever the builder set, but normalise field name\n  out._endpoint = endpoint || (p.photo ? 'sendPhoto' : 'sendMessage');\n}\n\nreturn [{ json: out }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -112,
        560
      ],
      "id": "dffeb23d-56c0-423e-b160-aeaa29abf6a7",
      "name": "TG: Send or Edit4"
    },
    {
      "parameters": {
        "jsCode": "// Auto-switch to edit endpoints on callbacks (no duplicate messages)\nconst isCb = $json.is_callback === true;\nconst mid  = $json.message_id;\nconst chat = $json.chat_id;\nconst p    = $json.payload || {};\nconst endpoint = ($json._endpoint || $json.method || '').toString();\n\nfunction safeStr(v, fallback=' ') {\n  const s = (v ?? '').toString();\n  return s.length ? s : fallback; // Telegram hates empty strings\n}\n\nconst out = { ...$json }; // preserve anything you already set\n\nif (isCb && mid && chat) {\n  // If the original builder wanted to send a photo (with caption),\n  // prefer editing the caption. (If you need to change the image itself,\n  // you’d use editMessageMedia, but caption/buttons is enough here.)\n  const isPhoto = endpoint === 'sendPhoto' || typeof p.photo === 'string';\n\n  if (isPhoto) {\n    out._endpoint = 'editMessageCaption';\n    out.payload = {\n      chat_id: chat,\n      message_id: mid,\n      caption: safeStr(p.caption),\n      parse_mode: p.parse_mode || 'Markdown',\n      reply_markup: p.reply_markup\n    };\n  } else {\n    out._endpoint = 'editMessageText';\n    out.payload = {\n      chat_id: chat,\n      message_id: mid,\n      text: safeStr(p.text),\n      parse_mode: p.parse_mode || 'Markdown',\n      reply_markup: p.reply_markup,\n      disable_web_page_preview: true\n    };\n  }\n} else {\n  // Non-callback: keep whatever the builder set, but normalise field name\n  out._endpoint = endpoint || (p.photo ? 'sendPhoto' : 'sendMessage');\n}\n\nreturn [{ json: out }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        960,
        4096
      ],
      "id": "2a14a157-1213-435a-b8a1-f21f67c6afa1",
      "name": "TG: Send or Edit5"
    },
    {
      "parameters": {
        "amount": "=1"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -400,
        2480
      ],
      "id": "fc889494-4019-4a72-bf28-489a527ab4fb",
      "name": "RL: UserStates Update",
      "webhookId": "4ea43489-3792-464d-9385-5254295ba874"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -352,
        2720
      ],
      "id": "c4973b45-8ac6-430b-bba6-1b1da5563750",
      "name": "RL: UserStates Append",
      "webhookId": "e53853c9-9349-4b29-ba0b-22fd2b95aa7a"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -832,
        144
      ],
      "id": "7b626f97-4ae8-4ff6-b306-9787c9e14311",
      "name": "RL: Phone Update",
      "webhookId": "e13c9007-d0f9-4ddb-937f-242dca1ff925"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -816,
        496
      ],
      "id": "42425701-edbc-4d88-80f7-8b60b4e7dea3",
      "name": "RL: Address Update",
      "webhookId": "c899ebcd-e9e0-46ca-ba04-8a39c5f3ece1"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        640,
        3840
      ],
      "id": "faeac89e-9ae7-4930-b2d5-b81563663fa8",
      "name": "RL: Cart Append",
      "webhookId": "fc00677f-1938-422a-9e7e-73594e74c846"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        112,
        3664
      ],
      "id": "05c8f027-c5f7-4149-a78f-f2251e2ff5c8",
      "name": "RL: userstate Append",
      "webhookId": "f29a86eb-22c4-4272-a4de-4567da5b840a"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -720,
        4480
      ],
      "id": "9137b56c-5253-4f11-9fd4-0cc084e21221",
      "name": "Wait",
      "webhookId": "ba7e7e34-930c-4452-8ead-5c044ec07bde"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        80,
        1216
      ],
      "id": "ef014dea-a967-4cca-b0b3-9763272d4e63",
      "name": "RL: Cart Update",
      "webhookId": "a29b86a3-445a-4a10-b501-d24ba5706200"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -544,
        2192
      ],
      "id": "ddfb0d49-4a44-4394-8363-528373ae9084",
      "name": "RL: Cart Clear",
      "webhookId": "f9652f86-e9f1-42fe-8783-aa20cf4d8c07"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -4640,
        3696
      ],
      "id": "a8587502-e91f-4543-a063-7c195a8dec84",
      "name": "RL: Orders Paid",
      "webhookId": "f01cd656-796e-4a6e-82d1-1a363bce6ebe"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -5296,
        3248
      ],
      "id": "269425dc-1418-4792-8548-44bb02566ff4",
      "name": "Wait1",
      "webhookId": "6ad16fa6-3371-4b9d-86dc-038990f99fc0"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -4640,
        3920
      ],
      "id": "d474960b-88d4-4c8a-a0f0-fbcecc6e15b6",
      "name": "Wait2",
      "webhookId": "642ee630-550d-4697-803d-17fc86235e4d"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -5520,
        3872
      ],
      "id": "71d976ba-e52c-4e28-820a-7fe26665fd71",
      "name": "Wait3",
      "webhookId": "a85cbf96-68ea-47eb-9cf9-f7a95f8f930f"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -5760,
        4256
      ],
      "id": "187fe8f3-518c-4ca7-82c1-655f9c802a67",
      "name": "Wait4",
      "webhookId": "90e09b44-e2f1-4f53-b678-513f6354b2eb"
    }
  ],
  "pinData": {
    "Telegram Trigger": [
      {
        "json": {
          "update_id": 933423541,
          "callback_query": {
            "id": "4924864820465189634",
            "from": {
              "id": 5441626742,
              "is_bot": false,
              "first_name": "Jon",
              "username": "Joni841",
              "language_code": "en"
            },
            "message": {
              "message_id": 2972,
              "from": {
                "id": 8293686289,
                "is_bot": true,
                "first_name": "Sefake Kitchen",
                "username": "SefakeKitchenBot"
              },
              "chat": {
                "id": 5441626742,
                "first_name": "Jon",
                "username": "Joni841",
                "type": "private"
              },
              "date": 1759002456,
              "text": "❌ Order not accepted\nRef: SFK-KI230S6\nWe’re unable to proceed with your order at this time.\nYou can try again or contact us below:",
              "entities": [
                {
                  "offset": 2,
                  "length": 18,
                  "type": "bold"
                },
                {
                  "offset": 26,
                  "length": 11,
                  "type": "bold"
                }
              ],
              "reply_markup": {
                "inline_keyboard": [
                  [
                    {
                      "text": "🧾 View menu",
                      "callback_data": "MENU|OPEN"
                    }
                  ],
                  [
                    {
                      "text": "🔁 Start over",
                      "callback_data": "RESET|START"
                    }
                  ],
                  [
                    {
                      "text": "☎️ Contact support",
                      "callback_data": "HELP|AGENT"
                    }
                  ]
                ]
              }
            },
            "chat_instance": "-5632903552296079870",
            "data": "HELP|AGENT"
          }
        }
      }
    ]
  },
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Normalize Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Event": {
      "main": [
        [
          {
            "node": "Build Customer Upsert",
            "type": "main",
            "index": 0
          },
          {
            "node": "GS: Read State",
            "type": "main",
            "index": 0
          },
          {
            "node": "Parse Callback",
            "type": "main",
            "index": 0
          },
          {
            "node": "GS: Read State (phone)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Customer Upsert": {
      "main": [
        [
          {
            "node": "GS: Read Customer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read Customer": {
      "main": [
        [
          {
            "node": "Find Customer Row",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Customer Row": {
      "main": [
        [
          {
            "node": "IF Customer Exists?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Customer Exists?": {
      "main": [
        [
          {
            "node": "Update Customer",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Append Customer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read State": {
      "main": [
        [
          {
            "node": "Guard: Skip Channel IDs4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find/Init State": {
      "main": [
        [
          {
            "node": "IF State Exists?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF State Exists?": {
      "main": [
        [],
        [
          {
            "node": "Guard: Skip Channel IDs3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Callback": {
      "main": [
        [
          {
            "node": "PAY|CONFIRM?",
            "type": "main",
            "index": 0
          },
          {
            "node": "ADMIN?",
            "type": "main",
            "index": 0
          },
          {
            "node": "IF: Is Greeting?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Guard: Kitchen Open?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Action Router": {
      "main": [
        [
          {
            "node": "GS: Read Menu",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GS: Read Menu",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GS: Read State (phone)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GS: Read Menu (add)",
            "type": "main",
            "index": 0
          },
          {
            "node": "GS: Read Cart (add)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Ack? (safe)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GS: Read Cart (view)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GS: Read Cart (clear)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GS: Read Cart (checkout)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GS: Read Menu (by SKU)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Ack? (safe)1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set Pickup Context",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Ack? (safe)2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Ack? (safe)3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Ack?(safe)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Default Menu Page",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GS: Read Cart (clear)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Reply: Contact Support",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GS: Read Menu",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GS: Read Menu",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GS: Read Menu",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read Menu": {
      "main": [
        [
          {
            "node": "Build Menu Reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Menu Reply": {
      "main": [
        [
          {
            "node": "TG: Send or Edit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Menu Page": {
      "main": [
        [
          {
            "node": "GS: Read Menu",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Dish Details": {
      "main": [
        [
          {
            "node": "HTTP Request (details)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pick Menu Item (by SKU)": {
      "main": [
        [
          {
            "node": "guard IF – invalid syntax",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Existing Cart Line": {
      "main": [
        [
          {
            "node": "IF Exists?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Exists?": {
      "main": [
        [
          {
            "node": "Bump Qty",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GS: Append Cart Line",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Append Cart Line": {
      "main": [
        [
          {
            "node": "IF Has Dupes?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Cart Summary": {
      "main": [
        [
          {
            "node": "TG: Send or Edit2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read Cart (view)": {
      "main": [
        [
          {
            "node": "Build Cart Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read Cart (clear)": {
      "main": [
        [
          {
            "node": "Collect Rows To Delete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Collect Rows To Delete": {
      "main": [
        [
          {
            "node": "IF Nothing To Delete?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Nothing To Delete?": {
      "main": [
        [
          {
            "node": "Carry Chat (clear)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Split In Batches (1)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split In Batches (1)": {
      "main": [
        [
          {
            "node": "Carry Chat (clear)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "RL: Cart Clear",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Delete Row": {
      "main": [
        [
          {
            "node": "Split In Batches (1)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read Menu (add)": {
      "main": [
        [
          {
            "node": "Pick Menu Item (by SKU)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Has Dupes?": {
      "main": [
        [
          {
            "node": "Make Dupe Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "GS: Delete Row (Row Number = {{$json.row_number}})",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Make Dupe Items": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Delete Row (Row Number = {{$json.row_number}})": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Carry Chat (clear)": {
      "main": [
        [
          {
            "node": "HTTP: Telegram Send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Checkout Summary": {
      "main": [
        [
          {
            "node": "TG: Send or Edit3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read Cart (checkout)": {
      "main": [
        [
          {
            "node": "Attach State → Lines (checkout)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read State(delivery)": {
      "main": [
        [
          {
            "node": "Has State?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ack? (safe)": {
      "main": [
        [
          {
            "node": "Ack Added",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read State (phone)": {
      "main": [
        [
          {
            "node": "IF: Awaiting PHONE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Needs Phone?": {
      "main": [
        [
          {
            "node": "Validate Ghana Phone",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Ghana Phone": {
      "main": [
        [
          {
            "node": "IF — is phone valid?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF — is phone valid?": {
      "main": [
        [
          {
            "node": "RL: Phone Update",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Reply: Invalid Phone",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reply: Invalid Phone": {
      "main": [
        [
          {
            "node": "HTTP: Telegram Send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Save Phone": {
      "main": [
        [
          {
            "node": "IF: Fulfillment is delivery?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reply: Ask Address": {
      "main": [
        [
          {
            "node": "HTTP: Telegram Send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Delivery Context": {
      "main": [
        [
          {
            "node": "RL: UserStates Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ask For Phone": {
      "main": [
        [
          {
            "node": "HTTP: Telegram Send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ack? (safe)1": {
      "main": [
        [
          {
            "node": "GS: Read State(delivery)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has State?": {
      "main": [
        [
          {
            "node": "IF State Exists?3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF State Exists?3": {
      "main": [
        [
          {
            "node": "Set Delivery Context",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set Delivery Context (create)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Append State (delivery)1": {
      "main": [
        [
          {
            "node": "Merge: State ──→ Needs Phone?",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Set Delivery Context (create)": {
      "main": [
        [
          {
            "node": "RL: UserStates Append",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Needs Address?": {
      "main": [
        [
          {
            "node": "Find Zone",
            "type": "main",
            "index": 0
          },
          {
            "node": "GS: Read Zones",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Zone": {
      "main": [
        [
          {
            "node": "IF Zone Found?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Zone Found?": {
      "main": [
        [
          {
            "node": "RL: Address Update",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Reply: Zone Not Found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Update State (address)": {
      "main": [
        [
          {
            "node": "Reply: Address OK",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reply: Address OK": {
      "main": [
        [
          {
            "node": "TG: Send or Edit4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reply: Zone Not Found": {
      "main": [
        [
          {
            "node": "HTTP: Telegram Send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Update State (delivery)1": {
      "main": [
        [
          {
            "node": "Merge: State ──→ Needs Phone?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Await Address (code)": {
      "main": [
        [
          {
            "node": "Update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ack? (safe)2": {
      "main": [
        [
          {
            "node": "Set Await Address (code)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update row in sheet": {
      "main": [
        [
          {
            "node": "Reply: Ask Address",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ack? (safe)3": {
      "main": [
        [
          {
            "node": "GS: Read Cart",
            "type": "main",
            "index": 0
          },
          {
            "node": "GS: Read State1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read Cart": {
      "main": [
        [
          {
            "node": "filter Cart",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "filter Cart": {
      "main": [
        [
          {
            "node": "Join: Cart+State",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Checkout Summary (code)": {
      "main": [
        [
          {
            "node": "HTTP: Telegram Send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read State1": {
      "main": [
        [
          {
            "node": "Join: Cart+State",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Join: Cart+State": {
      "main": [
        [
          {
            "node": "Build Checkout Summary (code)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ack?(safe)": {
      "main": [
        [
          {
            "node": "GS: Read Cart1",
            "type": "main",
            "index": 0
          },
          {
            "node": "GS: Read State (UserStates)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read Cart1": {
      "main": [
        [
          {
            "node": "filter Cart (qty>0)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read State (UserStates)": {
      "main": [
        [
          {
            "node": "Ensure Order Number",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Line Updates": {
      "main": [
        [
          {
            "node": "RL: Cart Append",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Payment Instructions": {
      "main": [
        [
          {
            "node": "TG: Send or Edit5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ensure Order Number": {
      "main": [
        [
          {
            "node": "Join: PayCard Inputs",
            "type": "main",
            "index": 1
          },
          {
            "node": "Join: Cart + OrderNo",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "filter Cart (qty>0)": {
      "main": [
        [
          {
            "node": "Join: Cart + OrderNo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Join: Cart + OrderNo": {
      "main": [
        [
          {
            "node": "Join: Cart + OrderNo1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Join: PayCard Inputs": {
      "main": [
        [
          {
            "node": "Build Payment Instructions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PAY|CONFIRM?": {
      "main": [
        [
          {
            "node": "Extract PAY|CONFIRM Ref",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract PAY|CONFIRM Ref": {
      "main": [
        [
          {
            "node": "Answer Callback (immediate)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Build Customer Processing Message",
            "type": "main",
            "index": 0
          },
          {
            "node": "GS: Read Cart (by ref) — REVIEW",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reply: Ref Not Found": {
      "main": [
        [
          {
            "node": "HTTP: Telegram Send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Customer Processing Message": {
      "main": [
        [
          {
            "node": "HTTP: Telegram Send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: OrderNumber matches ref (IF)": {
      "main": [
        [
          {
            "node": "Aggregate Lines & Totals",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Lines & Totals": {
      "main": [
        [
          {
            "node": "If: any lines?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read Orders (by ref)": {
      "main": [
        [
          {
            "node": "IF: Has Order row?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Freeze Updates": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: Has Order row?": {
      "main": [
        [
          {
            "node": "Attach Delivery Fee",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Reply: Ref Not Found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Kitchen Message": {
      "main": [
        [
          {
            "node": "HTTP: Telegram Send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Attach Delivery Fee": {
      "main": [
        [
          {
            "node": "Build Admin Review Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Customer Ack": {
      "main": [
        [
          {
            "node": "HTTP: Telegram Send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ADMIN?": {
      "main": [
        [
          {
            "node": "Extract Admin Action",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract Admin Action(Reject)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Admin Action": {
      "main": [
        [
          {
            "node": "Answer Admin Callback",
            "type": "main",
            "index": 0
          },
          {
            "node": "GS: Read Cart (by ref) — APPROVE",
            "type": "main",
            "index": 0
          },
          {
            "node": "Guard: Already Paid?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Guard: Skip Channel IDs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Answer Admin Callback": {
      "main": [
        [
          {
            "node": "HTTP: Telegram Send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Admin Review Message": {
      "main": [
        [
          {
            "node": "HTTP: Telegram Send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notify Customer (rejected)": {
      "main": [
        [
          {
            "node": "HTTP: Telegram Send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guard: Already Paid?": {
      "main": [
        [
          {
            "node": "Build Freeze Updates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read UserStates (by chat_id)": {
      "main": [
        [
          {
            "node": "Guard: Already Paid?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read Cart (by ref) — REVIEW": {
      "main": [
        [
          {
            "node": "IF: OrderNumber matches ref (IF)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read Cart (by ref) — APPROVE": {
      "main": [
        [
          {
            "node": "Ensure Cart Rows (approve)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guard: Skip Channel IDs": {
      "main": [
        [
          {
            "node": "GS: Read UserStates (by chat_id)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guard: Skip Channel IDs1": {
      "main": [
        [
          {
            "node": "Wait2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guard: Skip Channel IDs2": {
      "main": [
        [
          {
            "node": "Build UserState Reject Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guard: Skip Channel IDs3": {
      "main": [
        [
          {
            "node": "Append State",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guard: Skip Channel IDs4": {
      "main": [
        [
          {
            "node": "Find/Init State",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Lines & Totals — APPROVE": {
      "main": [
        [
          {
            "node": "GS: Read Orders (by ref)-Approve",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge (agg + order)",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "GS: Read Orders (by ref)-Approve": {
      "main": [
        [
          {
            "node": "Merge (agg + order)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Attach Delivery Fee — APPROVE": {
      "main": [
        [
          {
            "node": "Build Customer Ack",
            "type": "main",
            "index": 0
          },
          {
            "node": "Build Kitchen Message",
            "type": "main",
            "index": 0
          },
          {
            "node": "Guard: Skip Channel IDs1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Prepare Line Updates (approve)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge (agg + order)": {
      "main": [
        [
          {
            "node": "Attach Delivery Fee — APPROVE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Reject Updates (cart lines)": {
      "main": [
        [
          {
            "node": "IF: Has Rejectable Lines?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build UserState Reject Update": {
      "main": [
        [
          {
            "node": "Wait3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read Cart (by ref) — REJECT": {
      "main": [
        [
          {
            "node": "Build Reject Updates (cart lines)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read UserStates (by chat_id)2": {
      "main": [
        [
          {
            "node": "Guard: Skip Channel IDs2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Admin Action(Reject)": {
      "main": [
        [
          {
            "node": "GS: Read UserStates (by chat_id)2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Guard: Already Reviewed?",
            "type": "main",
            "index": 0
          },
          {
            "node": "GS: Read Cart (by ref) — REJECT",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guard: Already Reviewed?": {
      "main": [
        [
          {
            "node": "Answer Admin Callback (spinner off)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reply: Contact Support": {
      "main": [
        [
          {
            "node": "HTTP: Telegram Send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Pickup Context": {
      "main": [
        [
          {
            "node": "Reply: Pickup → Ask Phone",
            "type": "main",
            "index": 0
          },
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: Fulfillment is delivery?": {
      "main": [
        [
          {
            "node": "Reply: Ask Address",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GS: Read State (summary)",
            "type": "main",
            "index": 0
          },
          {
            "node": "GS: Read Cart (checkout)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reply: Pickup → Ask Phone": {
      "main": [
        [
          {
            "node": "HTTP: Telegram Send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read State (summary)": {
      "main": [
        [
          {
            "node": "Attach State → Lines (checkout)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Attach State → Lines (checkout)": {
      "main": [
        [
          {
            "node": "Build Checkout Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append or update row in sheet": {
      "main": [
        [
          {
            "node": "GS: Update UserStates (pickup)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If: any lines?": {
      "main": [
        [
          {
            "node": "GS: Read Orders (by ref)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Reply: Ref Not Found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Bump Qty": {
      "main": [
        [
          {
            "node": "RL: Cart Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "guard IF – invalid syntax": {
      "main": [
        [
          {
            "node": "Find Existing Cart Line",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: Awaiting PHONE": {
      "main": [
        [
          {
            "node": "Needs Phone?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "IF: Awaiting ADDRESS",
            "type": "main",
            "index": 0
          },
          {
            "node": "Needs Address?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Join: Cart + OrderNo1": {
      "main": [
        [
          {
            "node": "Prepare Line Updates",
            "type": "main",
            "index": 0
          },
          {
            "node": "Join: PayCard Inputs",
            "type": "main",
            "index": 0
          },
          {
            "node": "RL: userstate Append",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Line Updates (approve)": {
      "main": [
        [
          {
            "node": "RL: Orders Paid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: Has Rejectable Lines?": {
      "main": [
        [
          {
            "node": "Wait4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: Is Greeting?": {
      "main": [
        [
          {
            "node": "Action Router",
            "type": "main",
            "index": 0
          },
          {
            "node": "Build Greeting",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guard: Kitchen Open?": {
      "main": [
        [
          {
            "node": "IF: Kitchen is open?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Greeting": {
      "main": [
        [
          {
            "node": "HTTP: Telegram Send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Closed Message": {
      "main": [
        [
          {
            "node": "HTTP: Telegram Send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: Kitchen is open?": {
      "main": [
        [
          {
            "node": "Action Router",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Build Closed Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ensure Cart Rows (approve)": {
      "main": [
        [
          {
            "node": "Aggregate Lines & Totals — APPROVE",
            "type": "main",
            "index": 0
          },
          {
            "node": "Build Freeze Updates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge: State ──→ Needs Phone?": {
      "main": [
        [
          {
            "node": "Needs Phone? (Code)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Needs Phone? (Code)": {
      "main": [
        [
          {
            "node": "Guard: AskPhone once",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guard: AskPhone once": {
      "main": [
        [
          {
            "node": "Ask For Phone",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Update Cart Lines1": {
      "main": [
        [
          {
            "node": "Notify Customer (rejected)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read Menu (by SKU)": {
      "main": [
        [
          {
            "node": "TG: Send or Edit1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "TG: Send or Edit": {
      "main": [
        [
          {
            "node": "HTTP: Telegram Send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "TG: Send or Edit1": {
      "main": [
        [
          {
            "node": "Build Dish Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "TG: Send or Edit2": {
      "main": [
        [
          {
            "node": "HTTP: Telegram Send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "TG: Send or Edit3": {
      "main": [
        [
          {
            "node": "HTTP: Telegram Send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "TG: Send or Edit4": {
      "main": [
        [
          {
            "node": "HTTP: Telegram Send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "TG: Send or Edit5": {
      "main": [
        [
          {
            "node": "HTTP: Telegram Send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RL: UserStates Update": {
      "main": [
        [
          {
            "node": "GS: Update State (delivery)1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RL: UserStates Append": {
      "main": [
        [
          {
            "node": "GS: Append State (delivery)1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RL: Phone Update": {
      "main": [
        [
          {
            "node": "GS: Save Phone",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RL: Address Update": {
      "main": [
        [
          {
            "node": "GS: Update State (address)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RL: Cart Append": {
      "main": [
        [
          {
            "node": "GS: Update Lines (Orders)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RL: userstate Append": {
      "main": [
        [
          {
            "node": "GS: Update State (await_payment + LastOrderNumber)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Append or update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RL: Cart Update": {
      "main": [
        [
          {
            "node": "GS: Update Cart Line",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RL: Cart Clear": {
      "main": [
        [
          {
            "node": "GS: Delete Row",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RL: Orders Paid": {
      "main": [
        [
          {
            "node": "GS: Update Orders (mark paid)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "GS: Update Cart Lines",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait2": {
      "main": [
        [
          {
            "node": "GS: Update UserStates (mark paid)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait3": {
      "main": [
        [
          {
            "node": "GS: Update UserStates (reject)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait4": {
      "main": [
        [
          {
            "node": "GS: Update Cart Lines1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Answer Callback (immediate)": {
      "main": [
        [
          {
            "node": "HTTP: Telegram Send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "49174dd3-206b-42a0-81be-01964b3980e0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "9406bb58f60cf25428813fd7e451d41fa5e249d5d2f9c82aadc7e882245c5c23"
  },
  "id": "sTyoaqamPUZHCDLL",
  "tags": []
}